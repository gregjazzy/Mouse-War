// Contr√¥leur principal du jeu et boucle de jeu

let gameEngine = null;
let lastTimestamp = 0;
let animationId = null;

// Navigation des menus
function showLevelSelect() {
    hideAllScreens();
    document.getElementById('levelSelect').classList.add('active');
    loadAvailableModes(); // Charger les modes achet√©s
}

// Charger les modes disponibles
function loadAvailableModes() {
    const modesContainer = document.getElementById('modesContainer');
    
    // VIDER le container avant d'ajouter les modes
    modesContainer.innerHTML = '';
    
    const ownedLevels = playerData.ownedItems.filter(item => item.startsWith('level-'));
    
    console.log('üéÆ Niveaux poss√©d√©s:', ownedLevels);
    
    // D√©finir les modes disponibles
    const modesData = {
        'level-11': { icon: 'üåø', name: 'Jardin Paisible' },
        'level-4': { icon: 'üè∞', name: 'Ch√¢teau Hant√©' },
        'level-5': { icon: 'üåã', name: 'Caverne de Lave' },
        'level-6': { icon: '‚ùÑÔ∏è', name: 'Temple Glac√©' },
        'level-7': { icon: 'üåä', name: '√âgouts Aquatiques' },
        'level-8': { icon: '‚ö°', name: 'Tour √âlectrique' },
        'level-9': { icon: 'üåô', name: 'Donjon Nocturne' },
        'level-10': { icon: '‚ò†Ô∏è', name: 'Boss Final' }
    };
    
    // Ajouter les modes achet√©s
    ownedLevels.forEach(levelId => {
        if (modesData[levelId]) {
            const modeData = modesData[levelId];
            const levelNumber = parseInt(levelId.split('-')[1]);
            
            console.log('‚ûï Ajout du mode:', modeData.name, 'niveau', levelNumber);
            
            const modeCard = document.createElement('div');
            modeCard.className = 'mode-card';
            modeCard.innerHTML = `
                <div class="mode-header">
                    <div class="mode-icon">${modeData.icon}</div>
                    <h3 class="mode-name">${modeData.name}</h3>
                </div>
                <div class="difficulties-row">
                    <button class="difficulty-btn easy" onclick="startGame(${levelNumber})">
                        <div class="diff-stars">‚òÖ‚òÜ‚òÜ</div>
                        <div class="diff-label">Facile</div>
                    </button>
                    <button class="difficulty-btn medium" onclick="startGame(${levelNumber})">
                        <div class="diff-stars">‚òÖ‚òÖ‚òÜ</div>
                        <div class="diff-label">Moyen</div>
                    </button>
                    <button class="difficulty-btn hard" onclick="startGame(${levelNumber})">
                        <div class="diff-stars">‚òÖ‚òÖ‚òÖ</div>
                        <div class="diff-label">Difficile</div>
                    </button>
                </div>
            `;
            modesContainer.appendChild(modeCard);
        }
    });
    
    console.log('‚úÖ Modes charg√©s, total:', ownedLevels.length);
}

// Afficher le s√©lecteur de mode en jeu
function showModeSwitcher() {
    if (gameEngine) {
        gameEngine.isPaused = true;
    }
    
    const modeSwitcher = document.getElementById('modeSwitcher');
    const miniModesList = document.getElementById('miniModesList');
    
    // Vider la liste
    miniModesList.innerHTML = '';
    
    // Mode Classique (toujours disponible)
    const classicMode = document.createElement('div');
    classicMode.className = 'mini-mode-card';
    classicMode.innerHTML = `
        <div class="mini-mode-header">
            <span class="mini-mode-icon">üè†</span>
            <span class="mini-mode-name">Mode Classique</span>
        </div>
        <div class="mini-difficulties">
            <button class="mini-diff-btn easy" onclick="switchToMode(1)">‚òÖ‚òÜ‚òÜ</button>
            <button class="mini-diff-btn medium" onclick="switchToMode(2)">‚òÖ‚òÖ‚òÜ</button>
            <button class="mini-diff-btn hard" onclick="switchToMode(3)">‚òÖ‚òÖ‚òÖ</button>
        </div>
    `;
    miniModesList.appendChild(classicMode);
    
    // Modes achet√©s
    const modesData = {
        'level-4': { icon: 'üè∞', name: 'Ch√¢teau Hant√©' },
        'level-5': { icon: 'üåã', name: 'Caverne de Lave' },
        'level-6': { icon: '‚ùÑÔ∏è', name: 'Temple Glac√©' },
        'level-7': { icon: 'üåä', name: '√âgouts Aquatiques' },
        'level-8': { icon: '‚ö°', name: 'Tour √âlectrique' },
        'level-9': { icon: 'üåô', name: 'Donjon Nocturne' },
        'level-10': { icon: '‚ò†Ô∏è', name: 'Boss Final' }
    };
    
    const ownedLevels = playerData.ownedItems.filter(item => item.startsWith('level-'));
    ownedLevels.forEach(levelId => {
        if (modesData[levelId]) {
            const modeData = modesData[levelId];
            const levelNumber = parseInt(levelId.split('-')[1]);
            
            const modeCard = document.createElement('div');
            modeCard.className = 'mini-mode-card';
            modeCard.innerHTML = `
                <div class="mini-mode-header">
                    <span class="mini-mode-icon">${modeData.icon}</span>
                    <span class="mini-mode-name">${modeData.name}</span>
                </div>
                <div class="mini-difficulties">
                    <button class="mini-diff-btn easy" onclick="switchToMode(${levelNumber})">‚òÖ‚òÜ‚òÜ</button>
                    <button class="mini-diff-btn medium" onclick="switchToMode(${levelNumber})">‚òÖ‚òÖ‚òÜ</button>
                    <button class="mini-diff-btn hard" onclick="switchToMode(${levelNumber})">‚òÖ‚òÖ‚òÖ</button>
                </div>
            `;
            miniModesList.appendChild(modeCard);
        }
    });
    
    modeSwitcher.style.display = 'flex';
}

// Fermer le s√©lecteur de mode
function closeModeSwitcher() {
    document.getElementById('modeSwitcher').style.display = 'none';
    if (gameEngine) {
        gameEngine.isPaused = false;
    }
}

// Changer de mode en cours de jeu
function switchToMode(levelNumber) {
    closeModeSwitcher();
    startGame(levelNumber);
}

function showControls() {
    hideAllScreens();
    document.getElementById('controlsScreen').classList.add('active');
}

function showCredits() {
    alert('üê≠ MAZE MOUSE\n\n‚ú® Cr√©√© par CinderYaxley ‚ú®\n\nUn jeu d\'aventure premium\n\nD√©velopp√© avec ‚ù§Ô∏è en JavaScript\n\nGraphismes et animations de qualit√© Nintendo Switch\n\n¬© 2024');
}

function backToMenu() {
    // R√©initialiser l'√©tat du jeu si on √©tait en jeu
    if (gameEngine) {
        gameEngine.isPaused = true;
    }
    
    hideAllScreens();
    
    // V√©rifier si l'utilisateur est connect√©
    if (currentUser && accountsDatabase[currentUser]) {
    document.getElementById('startScreen').classList.add('active');
    } else {
        document.getElementById('loginScreen').classList.add('active');
    }
    
    updateCoinsDisplay();
}

function hideAllScreens() {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
}

// D√©marrer une partie
function startGame(levelNumber) {
    hideAllScreens();
    document.getElementById('gameScreen').classList.add('active');
    
    // Initialiser le nom du joueur
    const playerNameEl = document.getElementById('playerName');
    if (playerNameEl) {
        playerNameEl.textContent = playerName;
    }
    
    if (!gameEngine) {
        gameEngine = new GameEngine();
    }
    
    // üîß R√âINITIALISER LES VIES √Ä CHAQUE D√âMARRAGE
    gameEngine.lives = 3;
    
    // Initialiser la barre de vie IMM√âDIATEMENT
    updateHealthBar(3, 3);
    
    // ‚úÖ CHARGER LE SKIN √âQUIP√â DU JOUEUR
    console.log('üéÆ D√©marrage du jeu - currentUser:', currentUser);
    console.log('üéÆ accountsDatabase:', accountsDatabase);
    
    if (currentUser && accountsDatabase[currentUser]) {
        const currentSkin = accountsDatabase[currentUser].playerData.currentSkin || 'default';
        gameEngine.player.currentSkin = currentSkin;
        // Ajouter le nom d'utilisateur au joueur
        gameEngine.player.username = currentUser;
        console.log('üé® Skin charg√© pour le jeu:', currentSkin);
        console.log('üé® gameEngine.player.currentSkin:', gameEngine.player.currentSkin);
    } else {
        gameEngine.player.currentSkin = 'default';
        gameEngine.player.username = playerName || 'Joueur';
        console.log('‚ö†Ô∏è Pas d\'utilisateur connect√©, skin par d√©faut');
    }
    
    gameEngine.loadLevel(levelNumber);
    
    gameEngine.isPaused = false;
    gameEngine.isGameOver = false;
    gameEngine.isVictory = false;
    
    // üîß V√âRIFIER QUE L'√âCOUTEUR DE CLIC EST BIEN ACTIF
    console.log('üñ±Ô∏è Canvas pour attaque:', gameEngine.canvas ? 'OK' : 'ERREUR');
    
    // D√©marrer la boucle de jeu
    if (animationId) {
        cancelAnimationFrame(animationId);
    }
    lastTimestamp = performance.now();
    gameLoop();
    
    // Forcer la mise √† jour de l'UI apr√®s un court d√©lai
    setTimeout(() => {
        if (gameEngine) {
            updateHealthBar(gameEngine.lives, 3);
            console.log('‚ù§Ô∏è Vies apr√®s initialisation:', gameEngine.lives);
        }
    }, 100);
}

// Boucle de jeu principale
function gameLoop(timestamp = 0) {
    const deltaTime = timestamp - lastTimestamp;
    lastTimestamp = timestamp;
    
    if (gameEngine) {
        gameEngine.update(deltaTime);
        gameEngine.render();
    }
    
    animationId = requestAnimationFrame(gameLoop);
}

// Contr√¥les de jeu
function pauseGame() {
    if (!gameEngine) return;
    
    gameEngine.isPaused = true;
    document.getElementById('pauseMenu').classList.add('active');
}

function resumeGame() {
    if (!gameEngine) return;
    
    gameEngine.isPaused = false;
    document.getElementById('pauseMenu').classList.remove('active');
}

function restartLevel() {
    document.getElementById('pauseMenu').classList.remove('active');
    document.getElementById('gameOverScreen').classList.remove('active');
    document.getElementById('victoryScreen').classList.remove('active');
    
    if (gameEngine) {
        const currentLevel = gameEngine.currentLevel;
        startGame(currentLevel);
    }
}

function nextLevel() {
    document.getElementById('victoryScreen').classList.remove('active');
    
    if (gameEngine) {
        const nextLevelNumber = gameEngine.currentLevel + 1;
        const totalLevels = getTotalLevels();
        
        if (nextLevelNumber <= totalLevels) {
            startGame(nextLevelNumber);
        } else {
            // Tous les niveaux termin√©s
            showCongratulations();
        }
    }
}

function quitToMenu() {
    // Arr√™ter la boucle de jeu
    if (animationId) {
        cancelAnimationFrame(animationId);
        animationId = null;
    }
    
    // R√©initialiser le moteur
    if (gameEngine) {
        gameEngine.isPaused = true;
        gameEngine = null;
    }
    
    // Fermer tous les menus overlay
    document.getElementById('pauseMenu').classList.remove('active');
    document.getElementById('gameOverScreen').classList.remove('active');
    document.getElementById('victoryScreen').classList.remove('active');
    
    // Retour au menu principal
    hideAllScreens();
    document.getElementById('startScreen').classList.add('active');
}

// Afficher l'√©cran de victoire avec r√©compenses
function showVictory(time, cheeseCollected, totalCheese, score, stars) {
    const minutes = Math.floor(time / 60);
    const seconds = time % 60;
    const timeStr = `${minutes}:${seconds.toString().padStart(2, '0')}`;
    
    document.getElementById('finalTime').textContent = timeStr;
    document.getElementById('finalCheese').textContent = `${cheeseCollected}/${totalCheese}`;
    document.getElementById('finalScore').textContent = score;
    
    // Afficher les √©toiles
    let starsHTML = '';
    for (let i = 0; i < 3; i++) {
        if (i < stars) {
            starsHTML += '‚≠ê';
        } else {
            starsHTML += '‚òÜ';
        }
    }
    document.getElementById('starsDisplay').innerHTML = starsHTML;
    
    // Calculer les r√©compenses
    const rewards = calculateRewards(gameEngine.currentLevel, stars, time, cheeseCollected, totalCheese);
    
    // Afficher les r√©compenses
    displayRewards(rewards);
    
    // Afficher le menu avec animation
    setTimeout(() => {
        document.getElementById('victoryScreen').classList.add('active');
        playVictoryAnimation();
    }, 500);
}

// Calculer les r√©compenses en fonction des performances
function calculateRewards(level, stars, time, cheeseCollected, totalCheese) {
    const rewards = {
        coins: 0,
        title: '',
        badge: '',
        bonus: []
    };
    
    // Points de base R√âDUITS (environ 50 pi√®ces total)
    const baseCoinsPerLevel = {
        1: 10,  // Niveau 1 : 10 pi√®ces par √©toile (max 30)
        2: 12,  // Niveau 2 : 12 pi√®ces par √©toile (max 36)
        3: 15   // Niveau 3 : 15 pi√®ces par √©toile (max 45)
    };
    const baseCoinsPerStar = baseCoinsPerLevel[level] || 10;
    rewards.coins = stars * baseCoinsPerStar;
    
    // Bonus fromage complet (petit bonus)
    if (cheeseCollected === totalCheese) {
        const cheeseBonus = 5 * level;
        rewards.coins += cheeseBonus;
        rewards.bonus.push(`üßÄ Collectionneur : +${cheeseBonus} pi√®ces`);
    }
    
    // Bonus vitesse (petit bonus)
    if (time < 60) {
        const speedBonus = 10 * level;
        rewards.coins += speedBonus;
        rewards.bonus.push(`‚ö° Rapidit√© √©clair : +${speedBonus} pi√®ces`);
    } else if (time < 120) {
        const speedBonus = 5 * level;
        rewards.coins += speedBonus;
        rewards.bonus.push(`üèÉ Rapide : +${speedBonus} pi√®ces`);
    }
    
    // Titre et badge selon le niveau
    if (level === 1) {
        rewards.title = 'Explorateur du Garde-Manger';
        rewards.badge = 'üèÖ';
    } else if (level === 2) {
        rewards.title = 'Ma√Ætre de la Cave';
        rewards.badge = 'ü•à';
        rewards.coins += 5; // Bonus niveau difficile
        rewards.bonus.push('üî• Niveau Difficile : +5 pi√®ces');
    } else if (level === 3) {
        rewards.title = 'Champion du Labyrinthe';
        rewards.badge = 'ü•á';
        rewards.coins += 10; // Bonus niveau expert
        rewards.bonus.push('üíé Niveau Expert : +10 pi√®ces');
    }
    
    // Bonus perfection (3 √©toiles) - r√©duit
    if (stars === 3) {
        const perfectBonus = 10 * level;
        rewards.coins += perfectBonus;
        rewards.bonus.push(`‚ú® Perfection : +${perfectBonus} pi√®ces`);
    }
    
    return rewards;
}

// Afficher les r√©compenses dans l'√©cran de victoire
function displayRewards(rewards) {
    const victoryScreen = document.getElementById('victoryScreen');
    const menuContent = victoryScreen.querySelector('.menu-content');
    
    // Supprimer l'ancienne section de r√©compenses si elle existe
    const oldRewards = menuContent.querySelector('.rewards-section');
    if (oldRewards) {
        oldRewards.remove();
    }
    
    // Ajouter les pi√®ces au joueur
    addCoins(rewards.coins);
    
    // Cr√©er la section de r√©compenses
    const rewardsHTML = `
        <div class="rewards-section">
            <div class="reward-title">
                <h3>üéÅ R√âCOMPENSES üéÅ</h3>
            </div>
            
            <div class="reward-badge">
                <div class="badge-icon">${rewards.badge}</div>
                <div class="badge-title">${rewards.title}</div>
            </div>
            
            <div class="reward-coins">
                <div class="coins-icon">üí∞</div>
                <div class="coins-amount">${rewards.coins} pi√®ces</div>
            </div>
            
            ${rewards.bonus.length > 0 ? `
                <div class="reward-bonuses">
                    <h4>Bonus obtenus :</h4>
                    ${rewards.bonus.map(b => `<div class="bonus-item">${b}</div>`).join('')}
                </div>
            ` : ''}
        </div>
    `;
    
    // Ins√©rer apr√®s les stats
    const statsContainer = menuContent.querySelector('.stats-container');
    statsContainer.insertAdjacentHTML('afterend', rewardsHTML);
}

// Afficher l'√©cran de game over
function showGameOver() {
    setTimeout(() => {
        document.getElementById('gameOverScreen').classList.add('active');
    }, 500);
}

// Afficher les f√©licitations finales
function showCongratulations() {
    hideAllScreens();
    
    const overlay = document.createElement('div');
    overlay.className = 'overlay-menu active';
    overlay.innerHTML = `
        <div class="menu-content victory">
            <h2 class="victory-title">üéä F√âLICITATIONS ! üéä</h2>
            <p style="font-size: 1.5rem; margin: 2rem 0; color: #2C3E50; font-weight: 600;">
                Vous avez termin√© tous les niveaux !
            </p>
            <p style="font-size: 1.2rem; margin: 1rem 0; color: #4A5568;">
                La souris a r√©cup√©r√© tout le fromage et s'est √©chapp√©e du labyrinthe !
            </p>
            <div style="font-size: 3rem; margin: 2rem 0;">
                üê≠üßÄüéâ
            </div>
            <button class="btn btn-primary" onclick="location.reload()">
                üîÑ REJOUER
            </button>
            <button class="btn btn-secondary" onclick="quitToMenu()">
                ‚Üê MENU PRINCIPAL
            </button>
        </div>
    `;
    
    document.body.appendChild(overlay);
}

// Animations pour les √©crans de victoire
function playVictoryAnimation() {
    // Cr√©er des confettis
    const victoryScreen = document.getElementById('victoryScreen');
    
    for (let i = 0; i < 50; i++) {
        setTimeout(() => {
            createConfetti(victoryScreen);
        }, i * 50);
    }
}

function createConfetti(container) {
    const confetti = document.createElement('div');
    confetti.style.position = 'fixed';
    confetti.style.left = Math.random() * window.innerWidth + 'px';
    confetti.style.top = '-20px';
    confetti.style.width = '10px';
    confetti.style.height = '10px';
    confetti.style.backgroundColor = [
        '#FF6B6B', '#4ECDC4', '#FFE66D', '#95E1D3', '#F38181'
    ][Math.floor(Math.random() * 5)];
    confetti.style.transform = 'rotate(' + (Math.random() * 360) + 'deg)';
    confetti.style.pointerEvents = 'none';
    confetti.style.zIndex = '10000';
    
    container.appendChild(confetti);
    
    let y = -20;
    let x = parseFloat(confetti.style.left);
    const xVelocity = (Math.random() - 0.5) * 4;
    const yVelocity = Math.random() * 3 + 2;
    let rotation = 0;
    const rotationSpeed = (Math.random() - 0.5) * 10;
    
    const animate = () => {
        y += yVelocity;
        x += xVelocity;
        rotation += rotationSpeed;
        
        confetti.style.top = y + 'px';
        confetti.style.left = x + 'px';
        confetti.style.transform = 'rotate(' + rotation + 'deg)';
        
        if (y < window.innerHeight) {
            requestAnimationFrame(animate);
        } else {
            confetti.remove();
        }
    };
    
    animate();
}

// Animations pour les √©crans de victoire
// Emp√™cher le d√©filement de la page
window.addEventListener('keydown', (e) => {
    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', ' '].includes(e.key)) {
        e.preventDefault();
    }
    
    // F11 pour plein √©cran
    if (e.key === 'F11') {
        e.preventDefault();
        toggleFullscreen();
    }
});

// Fonction pour basculer en plein √©cran
function toggleFullscreen() {
    if (!document.fullscreenElement) {
        // Entrer en plein √©cran
        document.documentElement.requestFullscreen().catch(err => {
            console.log('Erreur plein √©cran:', err);
        });
    } else {
        // Sortir du plein √©cran
        if (document.exitFullscreen) {
            document.exitFullscreen();
        }
    }
}

// Mettre √† jour l'ic√¥ne du bouton et redimensionner le canvas
document.addEventListener('fullscreenchange', () => {
    const btn = document.querySelector('.fullscreen-btn span');
    if (btn) {
        btn.textContent = document.fullscreenElement ? '‚õ∂' : '‚õ∂';
    }
    
    // Redimensionner le canvas en mode plein √©cran
    if (gameEngine) {
        resizeCanvas();
    }
});

// Fonction pour redimensionner le canvas
function resizeCanvas() {
    if (!gameEngine || !gameEngine.canvas || !gameEngine.levelData) return;
    
    const container = document.getElementById('canvasContainer');
    if (!container) return;
    
    // PAUSE le jeu pendant le redimensionnement
    const wasPaused = gameEngine.isPaused;
    gameEngine.isPaused = true;
    
    // Sauvegarder le niveau actuel
    const currentLevel = gameEngine.currentLevel;
    
    if (document.fullscreenElement) {
        // Mode plein √©cran : utiliser toute la taille de l'√©cran
        const hud = document.querySelector('.game-hud');
        const hudHeight = hud ? hud.offsetHeight : 0;
        
        gameEngine.width = window.innerWidth;
        gameEngine.height = window.innerHeight - hudHeight;
        gameEngine.canvas.width = gameEngine.width;
        gameEngine.canvas.height = gameEngine.height;
    } else {
        // Mode normal
        gameEngine.width = 1280;
        gameEngine.height = 720;
        gameEngine.canvas.width = gameEngine.width;
        gameEngine.canvas.height = gameEngine.height;
    }
    
    // Recharger le niveau avec les nouvelles dimensions
    // Cela recalculera automatiquement les tailles de tiles
    gameEngine.loadLevel(currentLevel);
    
    // Remettre le jeu en marche seulement s'il n'√©tait pas d√©j√† en pause
    if (!wasPaused) {
        gameEngine.isPaused = false;
    }
}

// Redimensionner aussi lors du resize de la fen√™tre en plein √©cran
window.addEventListener('resize', () => {
    if (document.fullscreenElement && gameEngine) {
        resizeCanvas();
    }
});

// Gestion de la visibilit√© de la page (pause automatique)
document.addEventListener('visibilitychange', () => {
    if (document.hidden && gameEngine && !gameEngine.isPaused) {
        pauseGame();
    }
});

// Debug: Touches pour tester rapidement
window.addEventListener('keydown', (e) => {
    // Touche 'V' pour victoire (debug)
    if (e.key === 'v' && e.ctrlKey && gameEngine) {
        gameEngine.victory();
    }
    
    // Touche 'L' pour passer au niveau suivant (debug)
    if (e.key === 'l' && e.ctrlKey && gameEngine) {
        const nextLevelNumber = gameEngine.currentLevel + 1;
        if (nextLevelNumber <= getTotalLevels()) {
            startGame(nextLevelNumber);
        }
    }
});

// ============ SYST√àME DE GESTION DES COMPTES ============

// Musique de fond
let backgroundMusic = null;
let isMusicPlaying = false;
let musicVolume = 0.3; // Volume par d√©faut (30%)
let soundEffectsVolume = 0.5; // Volume des effets sonores (50%)

// Effets sonores
const soundEffects = {
    jump: null,
    collect: null,
    death: null,
    victory: null,
    click: null
};

function initBackgroundMusic() {
    // Cr√©er une musique de fond proc√©durale avec Web Audio API
    try {
        const AudioContext = window.AudioContext || window.webkitAudioContext;
        const audioContext = new AudioContext();
        
        // Cr√©er un oscillateur pour la m√©lodie
        const createMelodyLoop = () => {
            if (!isMusicPlaying) return;
            
            const now = audioContext.currentTime;
            const notes = [262, 294, 330, 349, 392, 440, 494, 523]; // Do majeur
            const melodyPattern = [0, 2, 4, 2, 0, 4, 7, 4]; // Pattern m√©lodique
            
            melodyPattern.forEach((noteIndex, i) => {
                const osc = audioContext.createOscillator();
                const gain = audioContext.createGain();
                
                osc.connect(gain);
                gain.connect(audioContext.destination);
                
                osc.type = 'sine';
                osc.frequency.value = notes[noteIndex];
                
                const startTime = now + i * 0.3;
                gain.gain.setValueAtTime(musicVolume * 0.1, startTime);
                gain.gain.exponentialRampToValueAtTime(0.001, startTime + 0.25);
                
                osc.start(startTime);
                osc.stop(startTime + 0.3);
            });
            
            setTimeout(createMelodyLoop, 2400);
        };
        
        backgroundMusic = {
            context: audioContext,
            start: createMelodyLoop,
            stop: () => { isMusicPlaying = false; },
            volume: musicVolume
        };
        
        console.log('üéµ Musique de fond initialis√©e (Web Audio API)');
    } catch (e) {
        console.log('‚ö†Ô∏è Erreur initialisation musique:', e);
        backgroundMusic = null;
    }
}

function initSoundEffects() {
    // Sons via Web Audio API (sons synth√©tis√©s pour √©viter les d√©pendances externes)
    if (!audioContext) {
        const AudioContext = window.AudioContext || window.webkitAudioContext;
        audioContext = new AudioContext();
    }
    
    // Son de saut (pitch montant rapide)
    soundEffects.jump = () => {
        if (!audioContext) return;
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(200, audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(600, audioContext.currentTime + 0.1);
        
        gainNode.gain.setValueAtTime(soundEffectsVolume * 0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.1);
    };
    
    // Son de collecte de fromage (notes joyeuses)
    soundEffects.collect = () => {
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(523, audioContext.currentTime); // Do
        oscillator.frequency.setValueAtTime(659, audioContext.currentTime + 0.05); // Mi
        oscillator.frequency.setValueAtTime(784, audioContext.currentTime + 0.1); // Sol
        
        gainNode.gain.setValueAtTime(soundEffectsVolume * 0.3, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.15);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.15);
    };
    
    // Son de mort (descente dramatique)
    soundEffects.death = () => {
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(400, audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(50, audioContext.currentTime + 0.5);
        
        gainNode.gain.setValueAtTime(soundEffectsVolume * 0.4, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.5);
    };
    
    // Son de victoire (m√©lodie ascendante)
    soundEffects.victory = () => {
        const notes = [523, 587, 659, 784, 880]; // Do, R√©, Mi, Sol, La
        notes.forEach((freq, index) => {
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);
            
            const startTime = audioContext.currentTime + (index * 0.1);
            gainNode.gain.setValueAtTime(soundEffectsVolume * 0.3, startTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, startTime + 0.2);
            
            oscillator.start(startTime);
            oscillator.stop(startTime + 0.2);
        });
    };
    
    // Son de clic (petit bip)
    soundEffects.click = () => {
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
        
        gainNode.gain.setValueAtTime(soundEffectsVolume * 0.2, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.05);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.05);
    };
    
    // Son d'attaque (slash rapide et puissant)
    soundEffects.attack = () => {
        if (!audioContext) return;
        
        // Premier son : slash rapide
        const oscillator1 = audioContext.createOscillator();
        const gainNode1 = audioContext.createGain();
        
        oscillator1.type = 'sawtooth'; // Son plus agressif
        oscillator1.connect(gainNode1);
        gainNode1.connect(audioContext.destination);
        
        oscillator1.frequency.setValueAtTime(600, audioContext.currentTime);
        oscillator1.frequency.exponentialRampToValueAtTime(200, audioContext.currentTime + 0.1);
        
        gainNode1.gain.setValueAtTime(soundEffectsVolume * 0.4, audioContext.currentTime);
        gainNode1.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
        
        oscillator1.start(audioContext.currentTime);
        oscillator1.stop(audioContext.currentTime + 0.1);
        
        // Deuxi√®me son : impact (l√©g√®rement retard√©)
        const oscillator2 = audioContext.createOscillator();
        const gainNode2 = audioContext.createGain();
        
        oscillator2.type = 'triangle';
        oscillator2.connect(gainNode2);
        gainNode2.connect(audioContext.destination);
        
        oscillator2.frequency.setValueAtTime(150, audioContext.currentTime + 0.05);
        
        gainNode2.gain.setValueAtTime(soundEffectsVolume * 0.3, audioContext.currentTime + 0.05);
        gainNode2.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.15);
        
        oscillator2.start(audioContext.currentTime + 0.05);
        oscillator2.stop(audioContext.currentTime + 0.15);
    };
    
    // Son de coup r√©ussi (quand on touche un ennemi)
    soundEffects.hit = () => {
        if (!audioContext) return;
        
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.type = 'square';
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(300, audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(100, audioContext.currentTime + 0.08);
        
        gainNode.gain.setValueAtTime(soundEffectsVolume * 0.35, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.08);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.08);
    };
    
    console.log('‚úÖ Effets sonores initialis√©s (attack, hit ajout√©s)');
    
    console.log('üîä Effets sonores initialis√©s');
}

function playSound(soundName) {
    if (soundEffects[soundName] && typeof soundEffects[soundName] === 'function') {
        try {
            soundEffects[soundName]();
            console.log(`üîä Son "${soundName}" jou√© avec succ√®s`);
        } catch (error) {
            console.log(`‚ö†Ô∏è Erreur son "${soundName}":`, error);
        }
    } else {
        console.log(`‚ö†Ô∏è Son "${soundName}" non trouv√©`);
    }
}

function playBackgroundMusic() {
    if (!backgroundMusic) {
        initBackgroundMusic();
    }
    
    if (backgroundMusic && !isMusicPlaying) {
        try {
            // Reprendre le contexte audio si suspendu
            if (backgroundMusic.context && backgroundMusic.context.state === 'suspended') {
                backgroundMusic.context.resume().then(() => {
                    console.log('üéµ AudioContext repris');
                    isMusicPlaying = true;
                    backgroundMusic.start();
                });
            } else {
                isMusicPlaying = true;
                backgroundMusic.start();
            }
            
            console.log('üéµ Musique de fond lanc√©e !');
        } catch (error) {
            console.log('‚ö†Ô∏è Erreur lecture musique:', error);
        }
    }
}

function pauseBackgroundMusic() {
    if (isMusicPlaying) {
        isMusicPlaying = false;
        if (musicIntervalId) {
            clearInterval(musicIntervalId);
            musicIntervalId = null;
        }
        console.log('‚è∏Ô∏è Musique en pause');
    }
}

function toggleBackgroundMusic() {
    console.log('üéµ Toggle musique - √âtat actuel:', isMusicPlaying);
    if (isMusicPlaying) {
        pauseBackgroundMusic();
        document.getElementById('musicToggleText').textContent = 'üîá Musique OFF';
    } else {
        playBackgroundMusic();
        document.getElementById('musicToggleText').textContent = 'üîä Musique ON';
    }
    return isMusicPlaying;
}

function setMusicVolume(volume) {
    musicVolume = Math.max(0, Math.min(1, volume)); // Entre 0 et 1
    localStorage.setItem('mazeMouse_musicVolume', musicVolume);
    console.log('üîä Volume musique:', musicVolume);
}

function setSoundEffectsVolume(volume) {
    soundEffectsVolume = Math.max(0, Math.min(1, volume)); // Entre 0 et 1
    localStorage.setItem('mazeMouse_soundEffectsVolume', soundEffectsVolume);
}

function updateMusicVolume(value) {
    const volume = value / 100;
    setMusicVolume(volume);
    document.getElementById('musicVolumeValue').textContent = value + '%';
}

function updateSoundVolume(value) {
    const volume = value / 100;
    setSoundEffectsVolume(volume);
    document.getElementById('soundVolumeValue').textContent = value + '%';
    // Jouer un son de test
    playSound('click');
}

// Base de donn√©es des utilisateurs (stock√©e dans localStorage)
let accountsDatabase = {};
let currentUser = null;

// Liste des avatars disponibles
const availableAvatars = ['üê≠', 'üêπ', 'üê∞', 'üê±', 'ü¶ä', 'üêª', 'üêº', 'üê®', 'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üê∏', 'üêµ', 'ü¶Ñ', 'üê≤', 'üë§'];

// Syst√®me d'armes √©l√©mentaires pour chaque skin
const skinElements = {
    'default': { element: 'neutre', weapon: 'ü§ö', color: '#888', name: 'Aucune arme' },
    'skin-golden': { element: 'lumi√®re', weapon: '‚ú®', color: '#FFD700', name: '√âclat Sacr√©', kills: ['shadow'] },
    'skin-ninja': { element: 'ombre', weapon: 'üó°Ô∏è', color: '#4B0082', name: 'Lame Nocturne', kills: ['light'] },
    'skin-wizard': { element: 'arcane', weapon: 'üîÆ', color: '#9370DB', name: 'Orbe Mystique', kills: ['demon', 'ghost'] },
    'skin-robot': { element: '√©lectrique', weapon: '‚ö°', color: '#00FFFF', name: 'D√©charge Tesla', kills: ['water', 'metal'] },
    'skin-pirate': { element: 'eau', weapon: 'üåä', color: '#1E90FF', name: 'Vague Pirate', kills: ['fire', 'earth'] },
    'skin-vampire': { element: 'sang', weapon: 'ü©∏', color: '#8B0000', name: 'Drain Vital', kills: ['living', 'holy'] },
    'skin-knight': { element: 'acier', weapon: '‚öîÔ∏è', color: '#C0C0C0', name: '√âp√©e Divine', kills: ['demon', 'undead'] },
    'skin-angel': { element: 'sacr√©', weapon: 'üïäÔ∏è', color: '#FFFFFF', name: 'Lumi√®re C√©leste', kills: ['demon', 'undead', 'shadow'] },
    'skin-demon': { element: 'infernal', weapon: 'üî•', color: '#FF4500', name: 'Flammes D√©moniaques', kills: ['ice', 'holy', 'nature'] },
    'skin-alien': { element: 'cosmique', weapon: 'üõ∏', color: '#00FF00', name: 'Rayon Alien', kills: ['earth', 'nature'] },
    'skin-rainbow': { element: 'arc-en-ciel', weapon: 'üåà', color: 'rainbow', name: 'Spectre Total', kills: ['all'] }, // Tue tout
    'skin-legendary': { element: 'divin', weapon: 'üëë', color: '#FFD700', name: 'Pouvoir Ultime', kills: ['all'] } // Tue tout
};

// Types d'ennemis avec leurs √©l√©ments
const enemyTypes = {
    'basic': { element: 'living', hp: 1, emoji: 'üëª', name: 'Fant√¥me Basique' },
    'shadow': { element: 'shadow', hp: 2, emoji: 'üòà', name: 'Ombre Mal√©fique' },
    'fire': { element: 'fire', hp: 2, emoji: 'üî•', name: '√âl√©mentaire de Feu' },
    'water': { element: 'water', hp: 2, emoji: 'üíß', name: 'Esprit Aquatique' },
    'demon': { element: 'demon', hp: 3, emoji: 'üëπ', name: 'D√©mon' },
    'ghost': { element: 'undead', hp: 2, emoji: 'üíÄ', name: 'Squelette' },
    'ice': { element: 'ice', hp: 2, emoji: '‚ùÑÔ∏è', name: 'Golem de Glace' },
    'nature': { element: 'nature', hp: 2, emoji: 'üåø', name: 'Esprit Nature' }
};

// Charger la base de donn√©es des comptes
function loadAccountsDatabase() {
    const saved = localStorage.getItem('mazeMouse_accounts');
    if (saved) {
        accountsDatabase = JSON.parse(saved);
    }
}

// Sauvegarder la base de donn√©es des comptes
function saveAccountsDatabase() {
    localStorage.setItem('mazeMouse_accounts', JSON.stringify(accountsDatabase));
}

// Afficher le formulaire de connexion
function showLoginForm() {
    document.getElementById('loginForm').classList.add('active');
    document.getElementById('registerForm').classList.remove('active');
    document.getElementById('loginError').textContent = '';
    document.getElementById('registerError').textContent = '';
}

// Afficher le formulaire d'inscription
function showRegisterForm() {
    document.getElementById('registerForm').classList.add('active');
    document.getElementById('loginForm').classList.remove('active');
    document.getElementById('loginError').textContent = '';
    document.getElementById('registerError').textContent = '';
}

// Fonction pour hasher un mot de passe (simple hash pour localStorage)
function hashPassword(password) {
    // Fonction simple de hash - pour une vraie application, utiliser bcrypt ou similaire
    let hash = 0;
    for (let i = 0; i < password.length; i++) {
        const char = password.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32bit integer
    }
    return hash.toString(36);
}

// Cr√©er un nouveau compte
function registerUser() {
    const username = document.getElementById('registerUsername').value.trim();
    const password = document.getElementById('registerPassword').value;
    const passwordConfirm = document.getElementById('registerPasswordConfirm').value;
    const errorEl = document.getElementById('registerError');
    
    // Validation
    if (!username || !password) {
        errorEl.textContent = '‚ùå Veuillez remplir tous les champs';
        return;
    }
    
    if (username.length < 3) {
        errorEl.textContent = '‚ùå Le nom doit contenir au moins 3 caract√®res';
        return;
    }
    
    if (password.length < 4) {
        errorEl.textContent = '‚ùå Le mot de passe doit contenir au moins 4 caract√®res';
        return;
    }
    
    if (password !== passwordConfirm) {
        errorEl.textContent = '‚ùå Les mots de passe ne correspondent pas';
        return;
    }
    
    // V√©rifier si le nom d'utilisateur existe d√©j√†
    if (accountsDatabase[username.toLowerCase()]) {
        errorEl.textContent = '‚ùå Ce nom d\'utilisateur est d√©j√† pris';
        return;
    }
    
    // Cr√©er le compte
    const hashedPassword = hashPassword(password);
    accountsDatabase[username.toLowerCase()] = {
        username: username,
        password: hashedPassword,
        avatar: availableAvatars[0], // Avatar par d√©faut
        createdAt: new Date().toISOString(),
        playerData: {
            coins: 0,
            ownedItems: ['level-11'], // Niveau gratuit au d√©part
    currentSkin: 'default'
        }
    };
    
    saveAccountsDatabase();
    
    // Afficher un message de succ√®s
    errorEl.style.color = '#4CAF50';
    errorEl.textContent = '‚úÖ Compte cr√©√© avec succ√®s ! Connexion...';
    
    // Se connecter automatiquement
    setTimeout(() => {
        currentUser = username.toLowerCase();
        localStorage.setItem('mazeMouse_currentUser', currentUser);
        loadPlayerDataForCurrentUser();
        showStartScreen();
    }, 1000);
}

// Se connecter
function loginUser() {
    const username = document.getElementById('loginUsername').value.trim();
    const password = document.getElementById('loginPassword').value;
    const errorEl = document.getElementById('loginError');
    
    // Validation
    if (!username || !password) {
        errorEl.textContent = '‚ùå Veuillez remplir tous les champs';
        return;
    }
    
    // V√©rifier les identifiants
    const userKey = username.toLowerCase();
    const account = accountsDatabase[userKey];
    
    if (!account) {
        errorEl.textContent = '‚ùå Nom d\'utilisateur incorrect';
        return;
    }
    
    const hashedPassword = hashPassword(password);
    if (account.password !== hashedPassword) {
        errorEl.textContent = '‚ùå Mot de passe incorrect';
        return;
    }
    
    // Connexion r√©ussie
    currentUser = userKey;
    localStorage.setItem('mazeMouse_currentUser', currentUser);
    loadPlayerDataForCurrentUser();
    showStartScreen();
}

// Se d√©connecter
function logoutUser() {
    if (confirm('√ätes-vous s√ªr de vouloir vous d√©connecter ?')) {
        // Sauvegarder les donn√©es du joueur actuel avant de se d√©connecter
        if (currentUser) {
            savePlayerDataForCurrentUser();
        }
        
        currentUser = null;
        localStorage.removeItem('mazeMouse_currentUser');
        
        // Retourner √† l'√©cran de connexion
        hideAllScreens();
        document.getElementById('loginScreen').classList.add('active');
        
        // R√©initialiser les formulaires
        document.getElementById('loginUsername').value = '';
        document.getElementById('loginPassword').value = '';
        document.getElementById('registerUsername').value = '';
        document.getElementById('registerPassword').value = '';
        document.getElementById('registerPasswordConfirm').value = '';
        document.getElementById('loginError').textContent = '';
        document.getElementById('registerError').textContent = '';
        showLoginForm();
    }
}

// Afficher l'√©cran de d√©marrage apr√®s connexion
function showStartScreen() {
    hideAllScreens();
    document.getElementById('startScreen').classList.add('active');
    
    // Mettre √† jour l'affichage du nom d'utilisateur et avatar
    if (currentUser && accountsDatabase[currentUser]) {
        const userData = accountsDatabase[currentUser];
        document.getElementById('currentUsername').textContent = userData.username;
        
        // Mettre √† jour l'avatar
        const avatarElements = document.querySelectorAll('.user-avatar, .user-menu-avatar');
        avatarElements.forEach(el => {
            el.textContent = userData.avatar || 'üë§';
        });
        
        // Afficher le bouton utilisateur, cacher le bouton de connexion
        document.querySelector('.current-user').style.display = 'flex';
        document.getElementById('loginBtn').style.display = 'none';
    } else {
        // Cacher le bouton utilisateur, afficher le bouton de connexion
        document.querySelector('.current-user').style.display = 'none';
        document.getElementById('loginBtn').style.display = 'block';
    }
    
    updateCoinsDisplay();
}

function showLoginFromMenu() {
    hideAllScreens();
    document.getElementById('loginScreen').classList.add('active');
    showLoginForm();
}

// Charger les donn√©es du joueur pour l'utilisateur actuel
function loadPlayerDataForCurrentUser() {
    if (!currentUser || !accountsDatabase[currentUser]) {
        return;
    }
    
    const account = accountsDatabase[currentUser];
    playerData = { ...account.playerData };
    
    // S'assurer que le niveau gratuit est toujours disponible
    if (!playerData.ownedItems.includes('level-11')) {
        playerData.ownedItems.push('level-11');
    }
    
    // üîß INITIALISER LES NOUVELLES PROPRI√âT√âS SI ELLES N'EXISTENT PAS
    if (!playerData.friends) {
        playerData.friends = [];
    }
    if (!playerData.friendRequests) {
        playerData.friendRequests = {
            incoming: [],
            outgoing: []
        };
    }
    
    updateCoinsDisplay();
}

// Sauvegarder les donn√©es du joueur pour l'utilisateur actuel
function savePlayerDataForCurrentUser() {
    if (!currentUser || !accountsDatabase[currentUser]) {
        return;
    }
    
    accountsDatabase[currentUser].playerData = { ...playerData };
    saveAccountsDatabase();
}

// V√©rifier si un utilisateur est connect√© au chargement
function checkUserSession() {
    loadAccountsDatabase();
    
    const savedUser = localStorage.getItem('mazeMouse_currentUser');
    if (savedUser && accountsDatabase[savedUser]) {
        currentUser = savedUser;
        loadPlayerDataForCurrentUser();
        showStartScreen();
    } else {
        // Pas de session active, montrer l'√©cran de connexion
        hideAllScreens();
        document.getElementById('loginScreen').classList.add('active');
        
        // Cacher le bouton utilisateur, afficher le bouton de connexion
        const userBtn = document.querySelector('.current-user');
        const loginBtn = document.getElementById('loginBtn');
        if (userBtn) userBtn.style.display = 'none';
        if (loginBtn) loginBtn.style.display = 'none'; // Cach√© sur l'√©cran de connexion
    }
}

// ============ SYST√àME DE BOUTIQUE ============

// Charger les donn√©es du joueur depuis localStorage
let playerData = {
    coins: 0,
    ownedItems: ['level-11'], // Niveau gratuit par d√©faut
    currentSkin: 'default',
    friends: [],  // Liste d'amis {username, avatar, lastSeen, isOnline}
    friendRequests: {
        incoming: [],  // Demandes re√ßues {username, avatar, timestamp}
        outgoing: []   // Demandes envoy√©es {username, avatar, timestamp}
    }
};

function loadPlayerData() {
    // Cette fonction n'est plus utilis√©e directement
    // Les donn√©es sont charg√©es via loadPlayerDataForCurrentUser()
    if (currentUser && accountsDatabase[currentUser]) {
        loadPlayerDataForCurrentUser();
    }
}

function savePlayerData() {
    // Sauvegarder les donn√©es dans le compte de l'utilisateur actuel
    if (currentUser) {
        savePlayerDataForCurrentUser();
    }
}

function updateCoinsDisplay() {
    const playerCoinsEl = document.getElementById('playerCoins');
    const shopCoinsEl = document.getElementById('shopCoins');
    if (playerCoinsEl) playerCoinsEl.textContent = playerData.coins;
    if (shopCoinsEl) shopCoinsEl.textContent = playerData.coins;
}

// Ajouter des pi√®ces au joueur
function addCoins(amount) {
    playerData.coins += amount;
    savePlayerData();
    updateCoinsDisplay();
}

// Afficher la boutique
function showShop() {
    // Fermer les menus overlay si on est en jeu
    document.getElementById('pauseMenu').classList.remove('active');
    document.getElementById('victoryScreen').classList.remove('active');
    document.getElementById('gameOverScreen').classList.remove('active');
    
    hideAllScreens();
    document.getElementById('shopScreen').classList.add('active');
    updateCoinsDisplay();
    updateShopItems();
    
    // Dessiner les previews des skins
    renderSkinPreviews();
}

// Changer de cat√©gorie dans la boutique
function showCategory(category) {
    // Retirer active de tous les boutons et cat√©gories
    document.querySelectorAll('.category-btn').forEach(btn => btn.classList.remove('active'));
    document.querySelectorAll('.shop-category').forEach(cat => cat.classList.remove('active'));
    
    // Activer la cat√©gorie s√©lectionn√©e
    if (category === 'skins') {
        document.querySelector('.category-btn').classList.add('active');
        document.getElementById('skinsCategory').classList.add('active');
    } else if (category === 'levels') {
        document.querySelectorAll('.category-btn')[1].classList.add('active');
        document.getElementById('levelsCategory').classList.add('active');
    }
}

// Mettre √† jour l'affichage des items de la boutique
function updateShopItems() {
    document.querySelectorAll('.shop-item').forEach(item => {
        const itemId = item.dataset.item;
        const price = parseInt(item.dataset.price);
        const btn = item.querySelector('.btn-buy');
        
        if (playerData.ownedItems.includes(itemId)) {
            item.classList.add('owned');
            item.dataset.owned = 'true';
            btn.textContent = 'POSS√âD√â';
            btn.disabled = true;
        } else if (playerData.coins < price) {
            btn.disabled = true;
            btn.textContent = 'PAS ASSEZ';
        } else {
            btn.disabled = false;
            btn.textContent = 'ACHETER';
        }
    });
}

// Acheter un item
function buyItem(itemId, price) {
    if (!currentUser || !accountsDatabase[currentUser]) {
        alert('‚ö†Ô∏è Vous devez √™tre connect√© pour acheter');
        return;
    }
    
    if (playerData.coins >= price && !playerData.ownedItems.includes(itemId)) {
        playerData.coins -= price;
        playerData.ownedItems.push(itemId);
        savePlayerDataForCurrentUser();
        updateCoinsDisplay();
        updateShopItems();
        
        // Animation de succ√®s
        const item = document.querySelector(`[data-item="${itemId}"]`);
        if (item) {
            item.style.animation = 'none';
            setTimeout(() => {
                item.style.animation = 'rewardAppear 0.5s ease-out';
            }, 10);
        }
        
        alert(`‚úÖ Achat r√©ussi ! Vous avez achet√© : ${item.querySelector('.item-name').textContent}`);
        console.log('‚úÖ Achat r√©ussi:', itemId);
    } else if (playerData.ownedItems.includes(itemId)) {
        alert('‚ö†Ô∏è Vous poss√©dez d√©j√† cet objet !');
    } else {
        alert('‚ö†Ô∏è Pas assez de pi√®ces !');
    }
}

// Donn√©es des skins disponibles
const skinsData = {
    'default': { icon: 'üê≠', name: 'Souris Classique' },
    'skin-golden': { icon: 'üåü', name: 'Souris Dor√©e' },
    'skin-pirate': { icon: 'üè¥‚Äç‚ò†Ô∏è', name: 'Souris Pirate' },
    'skin-ninja': { icon: 'ü•∑', name: 'Souris Ninja' },
    'skin-vampire': { icon: 'üßõ', name: 'Souris Vampire' },
    'skin-wizard': { icon: 'üßô', name: 'Souris Magicien' },
    'skin-knight': { icon: '‚öîÔ∏è', name: 'Souris Chevalier' },
    'skin-robot': { icon: 'ü§ñ', name: 'Souris Robot' },
    'skin-angel': { icon: 'üëº', name: 'Souris Ange' },
    'skin-demon': { icon: 'üòà', name: 'Souris D√©mon' },
    'skin-alien': { icon: 'üëΩ', name: 'Souris Alien' },
    'skin-rainbow': { icon: 'üåà', name: 'Souris Arc-en-ciel' },
    'skin-legendary': { icon: 'üêâ', name: 'Dragon L√©gendaire' }
};

// Afficher le s√©lecteur de skins
function showSkinSelector() {
    // Fermer les menus overlay si on est en jeu
    document.getElementById('pauseMenu').classList.remove('active');
    document.getElementById('victoryScreen').classList.remove('active');
    document.getElementById('gameOverScreen').classList.remove('active');
    
    hideAllScreens();
    document.getElementById('skinSelectorScreen').classList.add('active');
    updateSkinSelector();
}

// Mettre √† jour l'affichage du s√©lecteur de skins
function updateSkinSelector() {
    // Mettre √† jour l'affichage du skin actuel
    const currentSkinPreview = document.getElementById('currentSkinPreview');
    const currentSkin = playerData.currentSkin || 'default';
    const skinInfo = skinsData[currentSkin];
    
    currentSkinPreview.innerHTML = `
        <div class="skin-icon">${skinInfo.icon}</div>
        <div class="skin-name">${skinInfo.name}</div>
    `;
    
    // Afficher les skins poss√©d√©s
    const ownedSkinsGrid = document.getElementById('ownedSkinsGrid');
    
    // Toujours inclure le skin par d√©faut
    const ownedSkins = ['default', ...playerData.ownedItems.filter(item => item.startsWith('skin-'))];
    
    if (ownedSkins.length === 0) {
        ownedSkinsGrid.innerHTML = '<div class="no-skins-message">Vous ne poss√©dez aucun skin. Visitez la boutique pour en acheter !</div>';
        return;
    }
    
    ownedSkinsGrid.innerHTML = '';
    ownedSkins.forEach(skinId => {
        const skinInfo = skinsData[skinId];
        if (!skinInfo) return;
        
        const isEquipped = currentSkin === skinId;
        
        const skinCard = document.createElement('div');
        skinCard.className = `skin-card ${isEquipped ? 'equipped' : ''}`;
        skinCard.style.position = 'relative';
        skinCard.innerHTML = `
            <div class="skin-icon">${skinInfo.icon}</div>
            <div class="skin-name">${skinInfo.name}</div>
            <button class="equip-btn" onclick="equipSkin('${skinId}')" ${isEquipped ? 'disabled' : ''}>
                ${isEquipped ? '‚úì √âQUIP√â' : '√âQUIPER'}
            </button>
        `;
        
        ownedSkinsGrid.appendChild(skinCard);
    });
}

// √âquiper un skin
function equipSkin(skinId) {
    console.log('üé® √âquipement du skin:', skinId);
    console.log('üé® currentUser:', currentUser);
    console.log('üé® accountsDatabase:', accountsDatabase);
    
    if (!currentUser || !accountsDatabase[currentUser]) {
        alert('‚ö†Ô∏è Vous devez √™tre connect√© pour √©quiper un skin');
        return;
    }
    
    // V√©rifier que le joueur poss√®de ce skin
    const ownedSkins = ['default', ...playerData.ownedItems.filter(item => item.startsWith('skin-'))];
    if (!ownedSkins.includes(skinId)) {
        alert('‚ö†Ô∏è Vous ne poss√©dez pas ce skin');
        return;
    }
    
    // Mettre √† jour le skin
    playerData.currentSkin = skinId;
    accountsDatabase[currentUser].playerData.currentSkin = skinId;
    
    console.log('üé® Skin mis √† jour dans playerData:', playerData.currentSkin);
    console.log('üé® Skin mis √† jour dans accountsDatabase:', accountsDatabase[currentUser].playerData.currentSkin);
    
    savePlayerDataForCurrentUser();
    updateSkinSelector();
    
    const skinInfo = skinsData[skinId];
    alert(`‚úÖ Skin √©quip√© : ${skinInfo.name}`);
    console.log('‚úÖ Skin √©quip√© avec succ√®s:', skinId);
}

// Charger les donn√©es au d√©marrage
// V√©rifier la session utilisateur au lieu de charger directement les donn√©es
window.addEventListener('DOMContentLoaded', () => {
    console.log('üê≠ Maze Mouse - Jeu initialis√©');
    console.log('üéÆ Utilisez les fl√®ches et ESPACE pour jouer');
    
    // CR√âER le GraphicsRenderer
    if (!window.graphicsRenderer) {
        window.graphicsRenderer = new GraphicsRenderer();
        console.log('‚úÖ GraphicsRenderer cr√©√©');
    }
    
    // G√©n√©rer les aper√ßus de niveaux
    if (typeof generateLevelPreviews === 'function') {
        generateLevelPreviews();
    }
    
    // Easter egg: animation des particules sur l'√©cran d'accueil
    const particles = document.querySelectorAll('.particle');
    particles.forEach((particle, index) => {
        particle.style.animationDelay = (index * 2) + 's';
    });
    
    // V√©rifier la session utilisateur
    checkUserSession();
    
    // Ajouter la gestion de la touche Entr√©e pour les formulaires
    setupFormHandlers();
    
    // D√©marrer l'animation des objets qui tombent
    startFallingObjects();
    
    // Initialiser la musique de fond
    initBackgroundMusic();
    
    // Initialiser les effets sonores
    initSoundEffects();
    
    // D√©marrer la musique apr√®s la premi√®re interaction utilisateur
    let musicStarted = false;
    const startMusic = () => {
        if (!musicStarted) {
            musicStarted = true;
            playBackgroundMusic();
            console.log('üéµ Tentative de d√©marrage de la musique...');
        }
    };
    
    // Essayer de d√©marrer au premier clic ou touche
    document.addEventListener('click', startMusic, { once: true });
    document.addEventListener('keydown', startMusic, { once: true });
    
    // Ajouter des sons de clic sur tous les boutons
    document.querySelectorAll('.btn, button').forEach(btn => {
        btn.addEventListener('click', () => {
            playSound('click');
            console.log('üîä Son de clic jou√©');
        });
    });
});

// ============ SYST√àME D'OBJETS QUI TOMBENT ============

let fallingObjectsInterval = null;
const fallingEmojis = ['üßÄ', 'üê≠', '‚≠ê', 'üéÅ', 'üíé', 'üç∞', 'üéà', 'üåü', '‚ú®', 'üí´', 'üéµ', 'üéÆ', 'üèÜ', 'üëë'];

function createFallingObject() {
    // Ne cr√©er que si on est sur l'√©cran startScreen
    const startScreen = document.getElementById('startScreen');
    if (!startScreen || !startScreen.classList.contains('active')) {
        return;
    }
    
    const container = document.getElementById('fallingObjects');
    if (!container) return;
    
    const object = document.createElement('div');
    object.className = 'falling-object';
    
    // Choisir un emoji al√©atoire
    const emoji = fallingEmojis[Math.floor(Math.random() * fallingEmojis.length)];
    object.textContent = emoji;
    
    // Position horizontale al√©atoire
    object.style.left = Math.random() * 100 + '%';
    
    // Taille al√©atoire
    const size = 1.5 + Math.random() * 2; // Entre 1.5rem et 3.5rem
    object.style.fontSize = size + 'rem';
    
    // Dur√©e de chute al√©atoire
    const duration = 4 + Math.random() * 4; // Entre 4s et 8s
    object.style.animationDuration = duration + 's';
    
    // Animation al√©atoire
    const animations = ['', 'spin-left', 'spin-right', 'wobble'];
    const randomAnimation = animations[Math.floor(Math.random() * animations.length)];
    if (randomAnimation) {
        object.classList.add(randomAnimation);
    }
    
    // Ajouter au container
    container.appendChild(object);
    
    // Supprimer apr√®s l'animation
    setTimeout(() => {
        object.remove();
    }, duration * 1000);
}

function startFallingObjects() {
    // Cr√©er un objet toutes les 800ms √† 1500ms
    function scheduleNext() {
        // V√©rifier si on est toujours sur startScreen
        const startScreen = document.getElementById('startScreen');
        if (startScreen && startScreen.classList.contains('active')) {
            createFallingObject();
        }
        const delay = 800 + Math.random() * 700;
        setTimeout(scheduleNext, delay);
    }
    scheduleNext();
}

function stopFallingObjects() {
    // Nettoyer tous les objets existants
    const container = document.getElementById('fallingObjects');
    if (container) {
        container.innerHTML = '';
    }
}


// Configurer les gestionnaires de formulaires
function setupFormHandlers() {
    // Connexion avec la touche Entr√©e
    const loginInputs = ['loginUsername', 'loginPassword'];
    loginInputs.forEach(id => {
        const input = document.getElementById(id);
        if (input) {
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    loginUser();
                }
            });
        }
    });
    
    // Inscription avec la touche Entr√©e
    const registerInputs = ['registerUsername', 'registerPassword', 'registerPasswordConfirm'];
    registerInputs.forEach(id => {
        const input = document.getElementById(id);
        if (input) {
            input.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    registerUser();
                }
            });
        }
    });
}

// ============ MENU D√âROULANT UTILISATEUR ============

function toggleUserMenu() {
    const menu = document.getElementById('userMenu');
    const userButton = document.querySelector('.current-user');
    
    if (menu.classList.contains('active')) {
        menu.classList.remove('active');
        userButton.classList.remove('active');
    } else {
        menu.classList.add('active');
        userButton.classList.add('active');
        updateUserMenu();
    }
}

// Fermer le menu si on clique ailleurs
document.addEventListener('click', (e) => {
    const menu = document.getElementById('userMenu');
    const userButton = document.querySelector('.current-user');
    
    if (menu && userButton && !menu.contains(e.target) && !userButton.contains(e.target)) {
        menu.classList.remove('active');
        userButton.classList.remove('active');
    }
});

function updateUserMenu() {
    // Mettre √† jour le nom et les pi√®ces dans le menu
    if (currentUser && accountsDatabase[currentUser]) {
        const userData = accountsDatabase[currentUser];
        document.getElementById('userMenuName').textContent = userData.username;
        document.getElementById('userMenuCoins').textContent = playerData.coins;
        
        // Mettre √† jour l'avatar dans le menu
        const menuAvatar = document.querySelector('.user-menu-avatar');
        if (menuAvatar) {
            menuAvatar.textContent = userData.avatar || 'üë§';
        }
    }
    
    // Afficher les autres comptes
    updateOtherAccountsList();
}

function updateOtherAccountsList() {
    const container = document.getElementById('otherAccountsList');
    if (!container) return;
    
    // R√©cup√©rer tous les comptes sauf l'actuel
    const otherAccounts = Object.keys(accountsDatabase).filter(key => key !== currentUser);
    
    // Effacer la liste
    container.innerHTML = '<div class="user-menu-label">Autres comptes</div>';
    
    if (otherAccounts.length === 0) {
        const emptyMsg = document.createElement('div');
        emptyMsg.style.padding = '0.8rem 1rem';
        emptyMsg.style.fontSize = '0.9rem';
        emptyMsg.style.color = '#999';
        emptyMsg.style.fontStyle = 'italic';
        emptyMsg.textContent = 'Aucun autre compte';
        container.appendChild(emptyMsg);
        return;
    }
    
    // Ajouter chaque compte
    otherAccounts.forEach(accountKey => {
        const account = accountsDatabase[accountKey];
        const accountBtn = document.createElement('button');
        accountBtn.className = 'user-menu-item account';
        accountBtn.innerHTML = `
            <span class="menu-icon">üë§</span>
            <span class="menu-text">${account.username}</span>
        `;
        accountBtn.onclick = () => switchAccount(accountKey);
        container.appendChild(accountBtn);
    });
}

function switchAccount(accountKey) {
    if (!accountsDatabase[accountKey]) return;
    
    // Sauvegarder les donn√©es de l'utilisateur actuel
    if (currentUser) {
        savePlayerDataForCurrentUser();
    }
    
    // Changer d'utilisateur
    currentUser = accountKey;
    localStorage.setItem('mazeMouse_currentUser', currentUser);
    
    // Charger les donn√©es du nouveau compte
    loadPlayerDataForCurrentUser();
    
    // Mettre √† jour l'affichage
    document.getElementById('currentUsername').textContent = accountsDatabase[currentUser].username;
    updateCoinsDisplay();
    
    // Fermer le menu
    toggleUserMenu();
    
    console.log('‚úÖ Chang√© de compte vers:', accountsDatabase[currentUser].username);
}

function showSettings() {
    toggleUserMenu();
    hideAllScreens();
    document.getElementById('settingsScreen').classList.add('active');
    loadSettings();
    
    // Afficher le s√©lecteur d'avatar
    if (currentUser && accountsDatabase[currentUser]) {
        displayAvatarSelector();
    }
}

function displayAvatarSelector() {
    const avatarGrid = document.querySelector('.avatar-grid');
    if (!avatarGrid) return;
    
    const currentAvatar = accountsDatabase[currentUser].avatar || 'üë§';
    
    avatarGrid.innerHTML = '';
    availableAvatars.forEach(avatar => {
        const avatarBtn = document.createElement('button');
        avatarBtn.className = 'avatar-option';
        if (avatar === currentAvatar) {
            avatarBtn.classList.add('selected');
        }
        avatarBtn.textContent = avatar;
        avatarBtn.onclick = () => changeAvatar(avatar);
        avatarGrid.appendChild(avatarBtn);
    });
}

function changeAvatar(newAvatar) {
    if (!currentUser || !accountsDatabase[currentUser]) return;
    
    accountsDatabase[currentUser].avatar = newAvatar;
    saveAccountsDatabase();
    
    // Mettre √† jour l'affichage partout
    const avatarElements = document.querySelectorAll('.user-avatar, .user-menu-avatar');
    avatarElements.forEach(el => {
        el.textContent = newAvatar;
    });
    
    // Mettre √† jour le s√©lecteur
    displayAvatarSelector();
    
    console.log('‚úÖ Avatar chang√©:', newAvatar);
}

function showAddAccount() {
    toggleUserMenu();
    
    // Rediriger vers l'√©cran d'inscription
    hideAllScreens();
    document.getElementById('loginScreen').classList.add('active');
    showRegisterForm();
}

// ============ SYST√àME DE PARAM√àTRES ============

// Configuration par d√©faut des touches
let keyBindings = {
    left: 'ArrowLeft',
    right: 'ArrowRight',
    jump: ' ',
    pause: 'Escape'
};

// Langue par d√©faut
let currentLanguage = 'en'; // Anglais par d√©faut

// Traductions compl√®tes
const translations = {
    en: {
        title: 'MAZE MOUSE',
        subtitle: 'A Labyrinth Adventure',
        creator: 'Created by CinderYaxley',
        play: 'PLAY',
        shop: 'SHOP',
        skins: 'MY SKINS',
        controls: 'CONTROLS',
        about: 'ABOUT',
        settings: 'SETTINGS',
        logout: 'Logout',
        addAccount: 'Add Account',
        otherAccounts: 'Other Accounts',
        coins: 'coins',
        avatar: 'Avatar',
        language: 'Game Language',
        moveLeft: 'Move Left',
        moveRight: 'Move Right',
        jump: 'Jump',
        pause: 'Pause',
        resetKeys: 'Reset Keys',
        audio: 'Audio',
        comingSoon: 'Coming soon...',
        back: 'BACK'
    },
    fr: {
        title: 'MAZE MOUSE',
        subtitle: 'Une aventure dans le labyrinthe',
        creator: 'Cr√©√© par CinderYaxley',
        play: 'JOUER',
        shop: 'BOUTIQUE',
        skins: 'MES SKINS',
        controls: 'CONTR√îLES',
        about: '√Ä PROPOS',
        settings: 'PARAM√àTRES',
        logout: 'D√©connexion',
        addAccount: 'Ajouter un compte',
        otherAccounts: 'Autres comptes',
        coins: 'pi√®ces',
        avatar: 'Avatar',
        language: 'Langue du jeu',
        moveLeft: 'D√©placer √† gauche',
        moveRight: 'D√©placer √† droite',
        jump: 'Sauter',
        pause: 'Pause',
        resetKeys: 'R√©initialiser les touches',
        audio: 'Audio',
        comingSoon: 'Fonctionnalit√© √† venir...',
        back: 'RETOUR'
    },
    es: {
        title: 'MAZE MOUSE',
        subtitle: 'Una aventura en el laberinto',
        creator: 'Creado por CinderYaxley',
        play: 'JUGAR',
        shop: 'TIENDA',
        skins: 'MIS SKINS',
        controls: 'CONTROLES',
        about: 'ACERCA DE',
        settings: 'AJUSTES',
        logout: 'Cerrar sesi√≥n',
        addAccount: 'A√±adir cuenta',
        otherAccounts: 'Otras cuentas',
        coins: 'monedas',
        avatar: 'Avatar',
        language: 'Idioma del juego',
        moveLeft: 'Mover izquierda',
        moveRight: 'Mover derecha',
        jump: 'Saltar',
        pause: 'Pausa',
        resetKeys: 'Restablecer teclas',
        audio: 'Audio',
        comingSoon: 'Pr√≥ximamente...',
        back: 'VOLVER'
    },
    de: {
        title: 'MAZE MOUSE',
        subtitle: 'Ein Labyrinth-Abenteuer',
        creator: 'Erstellt von CinderYaxley',
        play: 'SPIELEN',
        shop: 'SHOP',
        skins: 'MEINE SKINS',
        controls: 'STEUERUNG',
        about: '√úBER',
        settings: 'EINSTELLUNGEN',
        logout: 'Abmelden',
        addAccount: 'Konto hinzuf√ºgen',
        otherAccounts: 'Andere Konten',
        coins: 'M√ºnzen',
        avatar: 'Avatar',
        language: 'Spielsprache',
        moveLeft: 'Nach links',
        moveRight: 'Nach rechts',
        jump: 'Springen',
        pause: 'Pause',
        resetKeys: 'Tasten zur√ºcksetzen',
        audio: 'Audio',
        comingSoon: 'Demn√§chst verf√ºgbar...',
        back: 'ZUR√úCK'
    },
    el: {
        title: 'MAZE MOUSE',
        subtitle: 'ŒúŒπŒ± œÄŒµœÅŒπœÄŒ≠œÑŒµŒπŒ± œÉœÑŒø ŒªŒ±Œ≤œçœÅŒπŒΩŒ∏Œø',
        creator: 'ŒîŒ∑ŒºŒπŒøœÖœÅŒ≥ŒÆŒ∏Œ∑Œ∫Œµ Œ±œÄœå CinderYaxley',
        play: 'Œ†ŒëŒôŒûŒï',
        shop: 'ŒöŒëŒ§ŒëŒ£Œ§ŒóŒúŒë',
        skins: 'Œ§Œë SKINS ŒúŒüŒ•',
        controls: 'ŒßŒïŒôŒ°ŒôŒ£Œ§ŒóŒ°ŒôŒë',
        about: 'Œ£ŒßŒïŒ§ŒôŒöŒë',
        settings: 'Œ°Œ•ŒòŒúŒôŒ£ŒïŒôŒ£',
        logout: 'ŒëœÄŒøœÉœçŒΩŒ¥ŒµœÉŒ∑',
        addAccount: 'Œ†œÅŒøœÉŒ∏ŒÆŒ∫Œ∑ ŒªŒøŒ≥Œ±œÅŒπŒ±œÉŒºŒøœç',
        otherAccounts: 'ŒÜŒªŒªŒøŒπ ŒªŒøŒ≥Œ±œÅŒπŒ±œÉŒºŒøŒØ',
        coins: 'ŒΩŒøŒºŒØœÉŒºŒ±œÑŒ±',
        avatar: 'ŒÜŒ≤Œ±œÑŒ±œÅ',
        language: 'ŒìŒªœéœÉœÉŒ± œÄŒ±ŒπœáŒΩŒπŒ¥ŒπŒøœç',
        moveLeft: 'ŒöŒØŒΩŒ∑œÉŒ∑ Œ±œÅŒπœÉœÑŒµœÅŒ¨',
        moveRight: 'ŒöŒØŒΩŒ∑œÉŒ∑ Œ¥ŒµŒæŒπŒ¨',
        jump: 'Œ†ŒÆŒ¥Œ∑ŒºŒ±',
        pause: 'Œ†Œ±œçœÉŒ∑',
        resetKeys: 'ŒïœÄŒ±ŒΩŒ±œÜŒøœÅŒ¨ œÄŒªŒÆŒ∫œÑœÅœâŒΩ',
        audio: 'ŒâœáŒøœÇ',
        comingSoon: 'ŒàœÅœáŒµœÑŒ±Œπ œÉœçŒΩœÑŒøŒºŒ±...',
        back: 'Œ†ŒôŒ£Œ©'
    },
    zh: {
        title: 'MAZE MOUSE',
        subtitle: 'Ëø∑ÂÆ´ÂÜíÈô©',
        creator: 'Áî± CinderYaxley Âàõ‰Ωú',
        play: 'ÂºÄÂßãÊ∏∏Êàè',
        shop: 'ÂïÜÂ∫ó',
        skins: 'ÊàëÁöÑÁöÆËÇ§',
        controls: 'ÊéßÂà∂',
        about: 'ÂÖ≥‰∫é',
        settings: 'ËÆæÁΩÆ',
        logout: 'ÁôªÂá∫',
        addAccount: 'Ê∑ªÂä†Ë¥¶Êà∑',
        otherAccounts: 'ÂÖ∂‰ªñË¥¶Êà∑',
        coins: 'ÈáëÂ∏Å',
        avatar: 'Â§¥ÂÉè',
        language: 'Ê∏∏ÊàèËØ≠Ë®Ä',
        moveLeft: 'ÂêëÂ∑¶ÁßªÂä®',
        moveRight: 'ÂêëÂè≥ÁßªÂä®',
        jump: 'Ë∑≥Ë∑É',
        pause: 'ÊöÇÂÅú',
        resetKeys: 'ÈáçÁΩÆÊåâÈîÆ',
        audio: 'Èü≥È¢ë',
        comingSoon: 'Âç≥Â∞ÜÊé®Âá∫...',
        back: 'ËøîÂõû'
    },
    ru: {
        title: 'MAZE MOUSE',
        subtitle: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ',
        creator: '–°–æ–∑–¥–∞–Ω–æ CinderYaxley',
        play: '–ò–ì–†–ê–¢–¨',
        shop: '–ú–ê–ì–ê–ó–ò–ù',
        skins: '–ú–û–ò –°–ö–ò–ù–´',
        controls: '–£–ü–†–ê–í–õ–ï–ù–ò–ï',
        about: '–û –ò–ì–†–ï',
        settings: '–ù–ê–°–¢–†–û–ô–ö–ò',
        logout: '–í—ã–π—Ç–∏',
        addAccount: '–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',
        otherAccounts: '–î—Ä—É–≥–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã',
        coins: '–º–æ–Ω–µ—Ç',
        avatar: '–ê–≤–∞—Ç–∞—Ä',
        language: '–Ø–∑—ã–∫ –∏–≥—Ä—ã',
        moveLeft: '–î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ',
        moveRight: '–î–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ',
        jump: '–ü—Ä—ã–∂–æ–∫',
        pause: '–ü–∞—É–∑–∞',
        resetKeys: '–°–±—Ä–æ—Å–∏—Ç—å –∫–ª–∞–≤–∏—à–∏',
        audio: '–ê—É–¥–∏–æ',
        comingSoon: '–°–∫–æ—Ä–æ –±—É–¥–µ—Ç...',
        back: '–ù–ê–ó–ê–î'
    }
};

function loadSettings() {
    // Charger les param√®tres depuis localStorage
    const savedSettings = localStorage.getItem('mazeMouse_settings');
    if (savedSettings) {
        const settings = JSON.parse(savedSettings);
        keyBindings = settings.keyBindings || keyBindings;
        currentLanguage = settings.language || 'en';
    }
    
    // Mettre √† jour l'affichage
    document.getElementById('languageSelect').value = currentLanguage;
    updateKeyDisplays();
    applyLanguage();
}

function saveSettings() {
    const settings = {
        keyBindings: keyBindings,
        language: currentLanguage
    };
    localStorage.setItem('mazeMouse_settings', JSON.stringify(settings));
}

function changeLanguage(lang) {
    currentLanguage = lang;
    saveSettings();
    applyLanguage();
}

function applyLanguage() {
    const t = translations[currentLanguage];
    if (!t) return;
    
    // Mettre √† jour tous les √©l√©ments avec data-translate
    document.querySelectorAll('[data-translate]').forEach(element => {
        const key = element.getAttribute('data-translate');
        if (t[key]) {
            element.textContent = t[key];
        }
    });
    
    // Mettre √† jour les boutons du menu
    const menuButtons = {
        '‚ñ∂': t.play,
        'üõçÔ∏è': t.shop,
        'üé®': t.skins,
        'üéÆ': t.controls,
        '‚ÑπÔ∏è': t.about
    };
    
    document.querySelectorAll('.menu-buttons .btn').forEach(btn => {
        const icon = btn.querySelector('.btn-icon');
        if (icon) {
            const iconText = icon.textContent;
            if (menuButtons[iconText]) {
                btn.innerHTML = `<span class="btn-icon">${iconText}</span>${menuButtons[iconText]}`;
            }
        }
    });
    
    // Mettre √† jour l'√©cran de param√®tres
    const settingsLabels = document.querySelectorAll('.settings-label');
    if (settingsLabels[0]) settingsLabels[0].textContent = t.language;
    if (settingsLabels[1]) settingsLabels[1].textContent = t.moveLeft;
    if (settingsLabels[2]) settingsLabels[2].textContent = t.moveRight;
    if (settingsLabels[3]) settingsLabels[3].textContent = t.jump;
    if (settingsLabels[4]) settingsLabels[4].textContent = t.pause;
    
    // Mettre √† jour le bouton de r√©initialisation
    const resetBtn = document.querySelector('.settings-section .btn-secondary');
    if (resetBtn) resetBtn.innerHTML = `üîÑ ${t.resetKeys}`;
    
    // Mettre √† jour les titres des sections
    const settingsSections = document.querySelectorAll('.settings-section-title');
    if (settingsSections[0]) settingsSections[0].textContent = 'üë§ ' + t.avatar; // Avatar
    if (settingsSections[1]) settingsSections[1].textContent = 'üåç ' + t.language; // Langue
    if (settingsSections[2]) settingsSections[2].textContent = 'üéÆ ' + t.controls; // Contr√¥les
    if (settingsSections[3]) settingsSections[3].textContent = 'üîä ' + t.audio; // Audio
    
    // Mettre √† jour "Fonctionnalit√© √† venir"
    const comingSoonText = document.querySelector('.settings-info p');
    if (comingSoonText) comingSoonText.textContent = t.comingSoon;
    
    // Mettre √† jour les boutons "Retour"
    document.querySelectorAll('.btn-back').forEach(btn => {
        btn.innerHTML = `‚Üê ${t.back}`;
    });
    
    // Mettre √† jour le menu utilisateur
    const userMenuLabels = document.querySelectorAll('.user-menu-label');
    if (userMenuLabels[0]) userMenuLabels[0].textContent = t.otherAccounts;
    
    const userMenuItems = document.querySelectorAll('.user-menu-item .menu-text');
    userMenuItems.forEach(item => {
        const parent = item.closest('.user-menu-item');
        if (parent && parent.querySelector('.menu-icon')?.textContent === '‚öôÔ∏è') {
            item.textContent = t.settings;
        } else if (parent && parent.querySelector('.menu-icon')?.textContent === '‚ûï') {
            item.textContent = t.addAccount;
        } else if (parent && parent.querySelector('.menu-icon')?.textContent === 'üö™') {
            item.textContent = t.logout;
        }
    });
    
    console.log('‚úÖ Langue appliqu√©e:', currentLanguage);
}

function updateKeyDisplays() {
    const keyNames = {
        'ArrowLeft': '‚Üê',
        'ArrowRight': '‚Üí',
        'ArrowUp': '‚Üë',
        'ArrowDown': '‚Üì',
        ' ': 'ESPACE',
        'Escape': 'ESC',
        'Enter': 'ENTR√âE'
    };
    
    document.getElementById('keyLeftDisplay').textContent = keyNames[keyBindings.left] || keyBindings.left;
    document.getElementById('keyRightDisplay').textContent = keyNames[keyBindings.right] || keyBindings.right;
    document.getElementById('keyJumpDisplay').textContent = keyNames[keyBindings.jump] || keyBindings.jump;
    document.getElementById('keyPauseDisplay').textContent = keyNames[keyBindings.pause] || keyBindings.pause;
}

let currentRemapping = null;

function remapKey(action) {
    if (currentRemapping) return;
    
    currentRemapping = action;
    const btn = document.getElementById('key' + action.charAt(0).toUpperCase() + action.slice(1));
    btn.classList.add('listening');
    
    // √âcouter la prochaine touche press√©e
    const keyListener = (e) => {
        e.preventDefault();
        
        // Ignorer certaines touches
        if (['F1', 'F5', 'F11', 'F12'].includes(e.key)) {
            return;
        }
        
        // Assigner la nouvelle touche
        keyBindings[action] = e.key;
        saveSettings();
        updateKeyDisplays();
        
        // Nettoyer
        btn.classList.remove('listening');
        document.removeEventListener('keydown', keyListener);
        currentRemapping = null;
    };
    
    document.addEventListener('keydown', keyListener);
}

function resetDefaultKeys() {
    if (confirm('Voulez-vous r√©initialiser toutes les touches √† leurs valeurs par d√©faut ?')) {
        keyBindings = {
            left: 'ArrowLeft',
            right: 'ArrowRight',
            jump: ' ',
            pause: 'Escape'
        };
        saveSettings();
        updateKeyDisplays();
    }
}

// Modifier la fonction de contr√¥le du jeu pour utiliser les touches personnalis√©es
function isKeyPressed(action, key) {
    return key === keyBindings[action];
}

// ============ NOM DU JOUEUR ============

let playerName = 'Ma Souris';

// Supprimer la fonction showPlayerNamePrompt car on ne demande plus le nom
function showPlayerNamePrompt() {
    // Directement aller √† la s√©lection de niveau
    showLevelSelect();
}

// Mettre √† jour la barre de vie
function updateHealthBar(currentLives, maxLives = 3) {
    const healthFill = document.getElementById('healthFill');
    const healthText = document.getElementById('healthText');
    
    if (healthFill && healthText) {
        const percentage = (currentLives / maxLives) * 100;
        healthFill.style.width = percentage + '%';
        healthText.textContent = `${currentLives}/${maxLives}`;
    }
    
    // Mettre √† jour le nom au cas o√π
    const playerNameEl = document.getElementById('playerName');
    if (playerNameEl) {
        playerNameEl.textContent = playerName;
    }
}

// ============ SYST√àME DE T√âL√âPORTATION (WIZARD) ============

let teleportMode = false;
let teleportCooldown = 0; // Cooldown en secondes
let teleportCooldownInterval = null;
const teleportBtn = document.getElementById('teleportBtn');
const gameCanvas = document.getElementById('gameCanvas');

// Fonction pour d√©marrer le cooldown
function startTeleportCooldown() {
    teleportCooldown = 20; // 20 secondes
    teleportBtn.disabled = true;
    teleportBtn.style.opacity = '0.5';
    teleportBtn.style.cursor = 'not-allowed';
    
    // Mettre √† jour l'affichage du cooldown
    teleportCooldownInterval = setInterval(() => {
        if (teleportCooldown > 0) {
            teleportCooldown--;
            const minutes = Math.floor(teleportCooldown / 60);
            const seconds = teleportCooldown % 60;
            teleportBtn.innerHTML = `<span>‚è≥</span> ${seconds}s`;
        } else {
            clearInterval(teleportCooldownInterval);
            teleportBtn.disabled = false;
            teleportBtn.style.opacity = '1';
            teleportBtn.style.cursor = 'pointer';
            teleportBtn.innerHTML = '<span>‚ú®</span> T√âL√âPORTER';
        }
    }, 1000);
}

// Fonction pour activer/d√©sactiver le mode t√©l√©portation
function toggleTeleportMode() {
    if (teleportCooldown > 0) return; // Ne pas activer si en cooldown
    
    teleportMode = !teleportMode;
    
    if (teleportMode) {
        teleportBtn.classList.add('active');
        teleportBtn.innerHTML = '<span>‚úÖ</span> CLIQUEZ O√ô VOUS VOULEZ';
        document.body.classList.add('teleporting-mode');
    } else {
        teleportBtn.classList.remove('active');
        teleportBtn.innerHTML = '<span>‚ú®</span> T√âL√âPORTER';
        document.body.classList.remove('teleporting-mode');
    }
}

// G√©rer le clic sur le bouton de t√©l√©portation
if (teleportBtn) {
    teleportBtn.addEventListener('click', () => {
        if (gameEngine && gameEngine.player.currentSkin === 'skin-wizard' && teleportCooldown === 0) {
            toggleTeleportMode();
        }
    });
}

// G√©rer le clic sur le canvas pour t√©l√©porter
if (gameCanvas) {
    gameCanvas.addEventListener('click', (e) => {
        if (teleportMode && gameEngine && gameEngine.player.currentSkin === 'skin-wizard') {
            // Calculer les coordonn√©es dans le monde du jeu
            const rect = gameCanvas.getBoundingClientRect();
            const clickX = e.clientX - rect.left;
            const clickY = e.clientY - rect.top;
            
            // Convertir en coordonn√©es monde (en tenant compte de la cam√©ra)
            const worldX = clickX + gameEngine.camera.x;
            const worldY = clickY + gameEngine.camera.y;
            
            // T√©l√©porter le joueur
            gameEngine.player.x = worldX - gameEngine.player.width / 2;
            gameEngine.player.y = worldY - gameEngine.player.height / 2;
            gameEngine.player.velocityX = 0;
            gameEngine.player.velocityY = 0;
            
            // Effet visuel
            console.log('‚ú® T√âL√âPORTATION √†:', worldX.toFixed(0), worldY.toFixed(0));
            
            // D√©sactiver le mode t√©l√©portation
            toggleTeleportMode();
            
            // D√©marrer le cooldown de 1 minute
            startTeleportCooldown();
        }
    });
}

// V√©rifier si le skin wizard est √©quip√© et afficher/cacher le bouton
function updateTeleportButton() {
    if (gameEngine && gameEngine.player) {
        if (gameEngine.player.currentSkin === 'skin-wizard') {
            teleportBtn.style.display = 'block';
        } else {
            teleportBtn.style.display = 'none';
            if (teleportMode) {
                toggleTeleportMode();
            }
        }
    }
}

// Appeler updateTeleportButton r√©guli√®rement
setInterval(updateTeleportButton, 500);

// Fonction pour dessiner les previews des skins dans la boutique
function renderSkinPreviews() {
    const canvases = document.querySelectorAll('.item-preview');
    
    canvases.forEach(canvas => {
        const skinId = canvas.dataset.skin;
        const ctx = canvas.getContext('2d');
        
        // Effacer le canvas
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        
        // Cr√©er un objet joueur temporaire pour le preview (taille augment√©e)
        const previewPlayer = {
            x: 0,
            y: 0,
            width: 60,
            height: 60,
            direction: 'right',
            animationFrame: 0,
            isJumping: false,
            currentSkin: skinId,
            isStunned: false
        };
        
        // Dessiner la souris avec le skin (plus centr√©e pour mieux voir l'arme)
        if (window.graphicsRenderer) {
            ctx.save();
            ctx.translate(80, 80); // Centrer la souris dans le canvas plus grand
            window.graphicsRenderer.drawPlayer(ctx, previewPlayer);
            ctx.restore();
        }
    });
}


// ============ SYST√àME D'AMIS COMPLET ============

// Base de donn√©es fictive de joueurs (simule d'autres joueurs)
const mockPlayers = [
    { username: 'SpeedyMouse', avatar: 'üê≠', isOnline: true },
    { username: 'CheeseHunter', avatar: 'üßÄ', isOnline: false },
    { username: 'MazeMaster', avatar: 'üéÆ', isOnline: true },
    { username: 'NinjaRat', avatar: 'ü•∑', isOnline: false },
    { username: 'GamerPro', avatar: 'üëæ', isOnline: true },
    { username: 'SneakyPanda', avatar: 'üêº', isOnline: false },
    { username: 'FireDragon', avatar: 'üêâ', isOnline: true },
    { username: 'IceQueen', avatar: 'üëë', isOnline: false },
    { username: 'ThunderBolt', avatar: '‚ö°', isOnline: true },
    { username: 'ShadowNinja', avatar: 'üåô', isOnline: false },
    { username: 'StarHero', avatar: '‚≠ê', isOnline: true },
    { username: 'MoonWalker', avatar: 'üåü', isOnline: false },
    { username: 'CosmicCat', avatar: 'üê±', isOnline: true },
    { username: 'RocketRat', avatar: 'üöÄ', isOnline: false },
    { username: 'PixelKing', avatar: 'üëë', isOnline: true }
];

// Afficher l'√©cran des amis
function showFriendsScreen() {
    // Fermer tous les √©crans
    document.querySelectorAll('.screen').forEach(screen => screen.classList.remove('active'));
    // Ouvrir l'√©cran des amis
    document.getElementById('friendsScreen').classList.add('active');
    // Charger les donn√©es
    updateFriendsDisplay();
}

// Changer d'onglet
function switchFriendsTab(tab) {
    // Mettre √† jour les boutons d'onglet
    document.querySelectorAll('.friends-tab').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-tab="${tab}"]`).classList.add('active');
    
    // Mettre √† jour le contenu
    document.querySelectorAll('.friends-tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    if (tab === 'all') {
        document.getElementById('friendsTabAll').classList.add('active');
        renderFriendsList(playerData.friends);
    } else if (tab === 'online') {
        document.getElementById('friendsTabOnline').classList.add('active');
        renderOnlineFriendsList();
    } else if (tab === 'requests') {
        document.getElementById('friendsTabRequests').classList.add('active');
        renderRequestsLists();
    }
}

// Mettre √† jour l'affichage complet
function updateFriendsDisplay() {
    // Mettre √† jour les statistiques
    document.getElementById('friendsCount').textContent = playerData.friends.length;
    document.getElementById('requestsCount').textContent = 
        playerData.friendRequests.incoming.length + playerData.friendRequests.outgoing.length;
    
    // Afficher l'onglet actif
    const activeTab = document.querySelector('.friends-tab.active').dataset.tab;
    switchFriendsTab(activeTab);
}

// Afficher tous les amis
function renderFriendsList(friends) {
    const friendsList = document.getElementById('friendsList');
    
    if (!friends || friends.length === 0) {
        friendsList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üò¢</div>
                <div class="empty-text">Vous n'avez pas encore d'amis</div>
                <div class="empty-hint">Utilisez la barre de recherche pour trouver des joueurs !</div>
            </div>
        `;
        return;
    }
    
    friendsList.innerHTML = friends.map(friend => `
        <div class="friend-card">
            <div class="friend-info">
                <div class="friend-avatar">
                    ${friend.avatar}
                    <div class="friend-status-indicator ${friend.isOnline ? 'online' : 'offline'}"></div>
                </div>
                <div class="friend-details">
                    <div class="friend-name">${friend.username}</div>
                    <div class="friend-status-text ${friend.isOnline ? 'online' : ''}">
                        ${friend.isOnline ? 'üü¢ En ligne' : '‚ö´ Hors ligne - ' + friend.lastSeen}
                    </div>
                </div>
            </div>
            <div class="friend-actions">
                <button class="friend-action-btn view-profile" onclick="viewFriendProfile('${friend.username}')">
                    üë§ Profil
                </button>
                <button class="friend-action-btn remove" onclick="removeFriend('${friend.username}')">
                    üóëÔ∏è Retirer
                </button>
            </div>
        </div>
    `).join('');
}

// Afficher les amis en ligne
function renderOnlineFriendsList() {
    const onlineFriends = playerData.friends.filter(f => f.isOnline);
    const friendsListOnline = document.getElementById('friendsListOnline');
    
    if (onlineFriends.length === 0) {
        friendsListOnline.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üí§</div>
                <div class="empty-text">Aucun ami en ligne</div>
                <div class="empty-hint">Vos amis se connecteront bient√¥t !</div>
            </div>
        `;
        return;
    }
    
    friendsListOnline.innerHTML = onlineFriends.map(friend => `
        <div class="friend-card">
            <div class="friend-info">
                <div class="friend-avatar">
                    ${friend.avatar}
                    <div class="friend-status-indicator online"></div>
                </div>
                <div class="friend-details">
                    <div class="friend-name">${friend.username}</div>
                    <div class="friend-status-text online">üü¢ En ligne</div>
                </div>
            </div>
            <div class="friend-actions">
                <button class="friend-action-btn view-profile" onclick="viewFriendProfile('${friend.username}')">
                    üë§ Profil
                </button>
                <button class="friend-action-btn remove" onclick="removeFriend('${friend.username}')">
                    üóëÔ∏è Retirer
                </button>
            </div>
        </div>
    `).join('');
}

// Afficher les demandes d'amis
function renderRequestsLists() {
    // Demandes re√ßues
    const incomingList = document.getElementById('incomingRequestsList');
    if (playerData.friendRequests.incoming.length === 0) {
        incomingList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üì≠</div>
                <div class="empty-text">Aucune demande en attente</div>
            </div>
        `;
    } else {
        incomingList.innerHTML = playerData.friendRequests.incoming.map(request => `
            <div class="request-card">
                <div class="request-info">
                    <div class="friend-avatar">${request.avatar}</div>
                    <div class="friend-details">
                        <div class="friend-name">${request.username}</div>
                        <div class="friend-status-text">Demande envoy√©e ${request.timestamp}</div>
                    </div>
                </div>
                <div class="request-actions">
                    <button class="request-action-btn accept" onclick="acceptFriendRequest('${request.username}')">
                        ‚úÖ Accepter
                    </button>
                    <button class="request-action-btn decline" onclick="declineFriendRequest('${request.username}')">
                        ‚ùå Refuser
                    </button>
                </div>
            </div>
        `).join('');
    }
    
    // Demandes envoy√©es
    const outgoingList = document.getElementById('outgoingRequestsList');
    if (playerData.friendRequests.outgoing.length === 0) {
        outgoingList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üì≠</div>
                <div class="empty-text">Aucune demande envoy√©e</div>
            </div>
        `;
    } else {
        outgoingList.innerHTML = playerData.friendRequests.outgoing.map(request => `
            <div class="request-card">
                <div class="request-info">
                    <div class="friend-avatar">${request.avatar}</div>
                    <div class="friend-details">
                        <div class="friend-name">${request.username}</div>
                        <div class="friend-status-text">En attente de r√©ponse...</div>
                    </div>
                </div>
                <div class="request-actions">
                    <button class="request-action-btn cancel" onclick="cancelFriendRequest('${request.username}')">
                        üö´ Annuler
                    </button>
                </div>
            </div>
        `).join('');
    }
}

// Rechercher un ami
function searchFriend() {
    const searchInput = document.getElementById('friendSearchInput');
    const searchTerm = searchInput.value.trim().toLowerCase();
    
    if (!searchTerm) {
        showNotification('‚ö†Ô∏è Entrez un nom d\'utilisateur', 'warning');
        return;
    }
    
    // Recherche dans la base de donn√©es fictive
    const results = mockPlayers.filter(player => 
        player.username.toLowerCase().includes(searchTerm) && 
        player.username.toLowerCase() !== currentUser.toLowerCase()
    );
    
    // Afficher les r√©sultats
    displaySearchResults(results);
}

// Afficher les r√©sultats de recherche
function displaySearchResults(results) {
    const overlay = document.getElementById('searchResultsOverlay');
    const resultsList = document.getElementById('searchResultsList');
    
    if (results.length === 0) {
        resultsList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üîç</div>
                <div class="empty-text">Aucun joueur trouv√©</div>
                <div class="empty-hint">Essayez un autre nom !</div>
            </div>
        `;
    } else {
        resultsList.innerHTML = results.map(player => {
            const isFriend = playerData.friends.some(f => f.username === player.username);
            const hasSentRequest = playerData.friendRequests.outgoing.some(r => r.username === player.username);
            const hasReceivedRequest = playerData.friendRequests.incoming.some(r => r.username === player.username);
            
            let buttonHTML;
            if (isFriend) {
                buttonHTML = '<button class="search-result-btn already-friend" disabled>‚úÖ D√©j√† ami</button>';
            } else if (hasSentRequest) {
                buttonHTML = '<button class="search-result-btn pending" disabled>‚è≥ En attente</button>';
            } else if (hasReceivedRequest) {
                buttonHTML = `<button class="search-result-btn accept" onclick="acceptFriendRequest('${player.username}'); closeSearchResults();">‚úÖ Accepter</button>`;
            } else {
                buttonHTML = `<button class="search-result-btn add-friend" onclick="sendFriendRequest('${player.username}', '${player.avatar}')">‚ûï Ajouter</button>`;
            }
            
            return `
                <div class="search-result-item">
                    <div class="search-result-info">
                        <div class="friend-avatar">
                            ${player.avatar}
                            <div class="friend-status-indicator ${player.isOnline ? 'online' : 'offline'}"></div>
                        </div>
                        <div class="friend-details">
                            <div class="friend-name">${player.username}</div>
                            <div class="friend-status-text ${player.isOnline ? 'online' : ''}">
                                ${player.isOnline ? 'üü¢ En ligne' : '‚ö´ Hors ligne'}
                            </div>
                        </div>
                    </div>
                    ${buttonHTML}
                </div>
            `;
        }).join('');
    }
    
    overlay.style.display = 'flex';
}

// Fermer les r√©sultats de recherche
function closeSearchResults() {
    document.getElementById('searchResultsOverlay').style.display = 'none';
    document.getElementById('friendSearchInput').value = '';
}

// Envoyer une demande d'ami
function sendFriendRequest(username, avatar) {
    // V√©rifier si d√©j√† ami ou demande d√©j√† envoy√©e
    if (playerData.friends.some(f => f.username === username)) {
        showNotification('‚ö†Ô∏è Vous √™tes d√©j√† amis !', 'warning');
        return;
    }
    if (playerData.friendRequests.outgoing.some(r => r.username === username)) {
        showNotification('‚ö†Ô∏è Demande d√©j√† envoy√©e !', 'warning');
        return;
    }
    
    // Ajouter √† la liste des demandes sortantes
    playerData.friendRequests.outgoing.push({
        username: username,
        avatar: avatar,
        timestamp: 'Il y a quelques secondes'
    });
    
    savePlayerData();
    showNotification(`‚úÖ Demande d'ami envoy√©e √† ${username} !`, 'success');
    
    // Mettre √† jour l'affichage
    displaySearchResults(mockPlayers.filter(p => 
        p.username.toLowerCase().includes(document.getElementById('friendSearchInput').value.toLowerCase()) &&
        p.username.toLowerCase() !== currentUser.toLowerCase()
    ));
    updateFriendsDisplay();
}

// Accepter une demande d'ami
function acceptFriendRequest(username) {
    // Trouver la demande
    const requestIndex = playerData.friendRequests.incoming.findIndex(r => r.username === username);
    if (requestIndex === -1) return;
    
    const request = playerData.friendRequests.incoming[requestIndex];
    
    // Ajouter aux amis
    playerData.friends.push({
        username: request.username,
        avatar: request.avatar,
        isOnline: mockPlayers.find(p => p.username === username)?.isOnline || false,
        lastSeen: 'Il y a 2 heures'
    });
    
    // Retirer de la liste des demandes
    playerData.friendRequests.incoming.splice(requestIndex, 1);
    
    savePlayerData();
    showNotification(`‚úÖ ${username} est maintenant votre ami !`, 'success');
    updateFriendsDisplay();
}

// Refuser une demande d'ami
function declineFriendRequest(username) {
    const requestIndex = playerData.friendRequests.incoming.findIndex(r => r.username === username);
    if (requestIndex === -1) return;
    
    playerData.friendRequests.incoming.splice(requestIndex, 1);
    savePlayerData();
    showNotification(`‚ùå Demande de ${username} refus√©e`, 'info');
    updateFriendsDisplay();
}

// Annuler une demande d'ami
function cancelFriendRequest(username) {
    const requestIndex = playerData.friendRequests.outgoing.findIndex(r => r.username === username);
    if (requestIndex === -1) return;
    
    playerData.friendRequests.outgoing.splice(requestIndex, 1);
    savePlayerData();
    showNotification(`üö´ Demande √† ${username} annul√©e`, 'info');
    updateFriendsDisplay();
}

// Retirer un ami
function removeFriend(username) {
    if (!confirm(`Voulez-vous vraiment retirer ${username} de vos amis ?`)) {
        return;
    }
    
    const friendIndex = playerData.friends.findIndex(f => f.username === username);
    if (friendIndex === -1) return;
    
    playerData.friends.splice(friendIndex, 1);
    savePlayerData();
    showNotification(`üóëÔ∏è ${username} a √©t√© retir√© de vos amis`, 'info');
    updateFriendsDisplay();
}

// Voir le profil d'un ami
function viewFriendProfile(username) {
    const friend = playerData.friends.find(f => f.username === username);
    if (!friend) return;
    
    showNotification(`üë§ Profil de ${username}`, 'info');
    // Ici on pourrait ajouter une fen√™tre de profil d√©taill√©e
}

// Notification syst√®me
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: ${type === 'success' ? 'linear-gradient(135deg, #10B981, #059669)' : 
                      type === 'warning' ? 'linear-gradient(135deg, #F59E0B, #D97706)' :
                      type === 'error' ? 'linear-gradient(135deg, #EF4444, #DC2626)' :
                      'linear-gradient(135deg, #6366F1, #4F46E5)'};
        color: white;
        padding: 1rem 2rem;
        border-radius: 15px;
        font-weight: 700;
        font-size: 1.1rem;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        z-index: 100000;
        animation: slideInRight 0.3s ease;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOutRight 0.3s ease';
        setTimeout(() => notification.remove(), 300);
    }, 3000);
}

// Ajouter les animations CSS pour les notifications
const notificationStyles = document.createElement('style');
notificationStyles.textContent = `
    @keyframes slideInRight {
        from {
            transform: translateX(400px);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOutRight {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(400px);
            opacity: 0;
        }
    }
`;
document.head.appendChild(notificationStyles);

// Simuler des demandes d'amis al√©atoires (pour la d√©mo)
function simulateIncomingFriendRequests() {
    // Ajouter quelques demandes d'amis fictives pour la d√©mo
    if (playerData.friendRequests.incoming.length === 0) {
        const randomPlayers = mockPlayers.sort(() => Math.random() - 0.5).slice(0, 2);
        randomPlayers.forEach(player => {
            if (!playerData.friends.some(f => f.username === player.username)) {
                playerData.friendRequests.incoming.push({
                    username: player.username,
                    avatar: player.avatar,
                    timestamp: 'Il y a quelques minutes'
                });
            }
        });
        savePlayerData();
    }
}

// Initialiser le syst√®me d'amis au chargement
window.addEventListener('load', () => {
    // Simuler des demandes uniquement si c'est la premi√®re fois
    setTimeout(simulateIncomingFriendRequests, 2000);
});


// ============ SYST√àME MULTIJOUEUR COMPLET ============

// Variables globales du multijoueur
let selectedTeam = null;
let currentServer = null;
let multiplayerPlayers = [];
let chatMessages = [];
let isChatOpen = false;
let isPlayersListOpen = false;
let matchTimer = 300; // 5 minutes
let matchInterval = null;
let teamScores = { red: 0, blue: 0 };

// Base de donn√©es fictive de noms de joueurs
const playerNames = [
    'DragonSlayer', 'MoonHunter', 'ShadowNinja', 'FirePhoenix', 'IceWizard',
    'ThunderStrike', 'CosmicHero', 'NeonDancer', 'PixelWarrior', 'StarChaser',
    'GhostRider', 'BlazeMaster', 'StormBreaker', 'CrystalKnight', 'DarkMage',
    'LightningBolt', 'FrostGuardian', 'InfernoKing', 'MysticSage', 'RogueAssassin',
    'NovaBlaster', 'EchoRanger', 'VortexHunter', 'ZenMaster', 'ApexLegend'
];

// Cr√©er des serveurs fictifs
function generateServers() {
    // Traductions des noms de langues
    const languageNames = {
        en: {
            fr: 'French',
            en: 'English',
            es: 'Spanish',
            de: 'German'
        },
        fr: {
            fr: 'Fran√ßais',
            en: 'Anglais',
            es: 'Espagnol',
            de: 'Allemand'
        },
        es: {
            fr: 'Franc√©s',
            en: 'Ingl√©s',
            es: 'Espa√±ol',
            de: 'Alem√°n'
        },
        de: {
            fr: 'Franz√∂sisch',
            en: 'Englisch',
            es: 'Spanisch',
            de: 'Deutsch'
        }
    };
    
    const serverWord = {
        en: 'Server',
        fr: 'Serveur',
        es: 'Servidor',
        de: 'Server'
    };
    
    const languages = [
        { code: 'fr', flag: 'üá´üá∑' },
        { code: 'en', flag: 'üá¨üáß' },
        { code: 'es', flag: 'üá™üá∏' },
        { code: 'de', flag: 'üá©üá™' }
    ];
    
    const servers = [];
    languages.forEach(lang => {
        for (let i = 1; i <= 3; i++) {
            const maxPlayers = 20;
            // SERVEURS AVEC JOUEURS FICTIFS POUR TESTER
            const currentPlayers = Math.floor(Math.random() * maxPlayers) + 1;
            // Pour d√©sactiver les serveurs (jeu non publi√©), d√©commentez la ligne suivante :
            // const currentPlayers = 0; // Serveurs vides par d√©faut
            const ping = currentPlayers > 0 ? Math.floor(Math.random() * 100) + 20 : 0;
            
            const langName = languageNames[currentLanguage]?.[lang.code] || languageNames['en'][lang.code];
            const servWord = serverWord[currentLanguage] || serverWord['en'];
            
            servers.push({
                id: `${lang.code}-${i}`,
                language: lang.code,
                flag: lang.flag,
                name: `${servWord} ${langName} #${i}`,
                players: currentPlayers,
                maxPlayers: maxPlayers,
                ping: ping,
                full: currentPlayers >= maxPlayers
            });
        }
    });
    
    return servers;
}

let allServers = generateServers();

// Afficher l'√©cran multijoueur
function showMultiplayerScreen() {
    document.querySelectorAll('.screen').forEach(screen => screen.classList.remove('active'));
    document.getElementById('multiplayerScreen').classList.add('active');
    refreshServers();
    updateFriendsPlaying();
}

// S√©lectionner une √©quipe
function selectTeam(team) {
    selectedTeam = team;
    showNotification(`‚úÖ √âquipe ${team === 'red' ? 'ROUGE üî¥' : 'BLEUE üîµ'} s√©lectionn√©e !`, 'success');
    
    // Scroll vers les serveurs
    setTimeout(() => {
        document.querySelector('.servers-container').scrollIntoView({ behavior: 'smooth' });
    }, 500);
}

// Rafra√Æchir les serveurs
function refreshServers() {
    allServers = generateServers();
    filterServers();
}

// Filtrer les serveurs par langue
function filterServers() {
    const languageFilter = document.getElementById('languageFilter').value;
    const serversList = document.getElementById('serversList');
    
    let filteredServers = allServers;
    if (languageFilter !== 'all') {
        filteredServers = allServers.filter(s => s.language === languageFilter);
    }
    
    if (filteredServers.length === 0) {
        serversList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üîç</div>
                <div class="empty-text">Aucun serveur disponible</div>
            </div>
        `;
        return;
    }
    
    serversList.innerHTML = filteredServers.map(server => {
        // V√©rifier si le serveur a des joueurs
        const isEmpty = server.players === 0;
        const isFull = server.full;
        const canJoin = !isEmpty && !isFull && selectedTeam;
        
        // Traductions pour les boutons
        const translations = {
            join: {
                en: 'üéÆ JOIN',
                fr: 'üéÆ REJOINDRE',
                es: 'üéÆ UNIRSE',
                de: 'üéÆ BEITRETEN'
            },
            unavailable: {
                en: 'üö´ SERVER UNAVAILABLE',
                fr: 'üö´ SERVEUR INACCESSIBLE',
                es: 'üö´ SERVIDOR NO DISPONIBLE',
                de: 'üö´ SERVER NICHT VERF√úGBAR'
            },
            full: {
                en: 'üîí FULL',
                fr: 'üîí COMPLET',
                es: 'üîí LLENO',
                de: 'üîí VOLL'
            },
            chooseTeam: {
                en: '‚ö†Ô∏è CHOOSE TEAM',
                fr: '‚ö†Ô∏è CHOISIR √âQUIPE',
                es: '‚ö†Ô∏è ELEGIR EQUIPO',
                de: '‚ö†Ô∏è TEAM W√ÑHLEN'
            },
            offline: {
                en: '‚ö†Ô∏è Offline',
                fr: '‚ö†Ô∏è Hors ligne',
                es: '‚ö†Ô∏è Desconectado',
                de: '‚ö†Ô∏è Offline'
            }
        };
        
        let buttonText = translations.join[currentLanguage] || translations.join['en'];
        let buttonDisabled = false;
        
        if (isEmpty) {
            buttonText = translations.unavailable[currentLanguage] || translations.unavailable['en'];
            buttonDisabled = true;
        } else if (isFull) {
            buttonText = translations.full[currentLanguage] || translations.full['en'];
            buttonDisabled = true;
        } else if (!selectedTeam) {
            buttonText = translations.chooseTeam[currentLanguage] || translations.chooseTeam['en'];
            buttonDisabled = true;
        }
        
        const offlineText = translations.offline[currentLanguage] || translations.offline['en'];
        
        return `
            <div class="server-card ${isEmpty ? 'server-unavailable' : ''}">
                <div class="server-info">
                    <div class="server-flag">${server.flag}</div>
                    <div class="server-details">
                        <div class="server-name">${server.name}</div>
                        <div class="server-meta">
                            <span class="server-players ${isEmpty ? 'empty' : ''}">${isEmpty ? '‚ö†Ô∏è' : 'üë•'} ${server.players}/${server.maxPlayers}</span>
                            <span class="server-ping">${isEmpty ? offlineText : 'üì∂ ' + server.ping + 'ms'}</span>
                        </div>
                    </div>
                </div>
                <div class="server-actions">
                    <button class="join-server-btn" 
                            onclick="joinServer('${server.id}')" 
                            ${buttonDisabled ? 'disabled' : ''}>
                        ${buttonText}
                    </button>
                </div>
            </div>
        `;
    }).join('');
    
    // Mettre √† jour les compteurs d'√©quipe
    const redCount = Math.floor(filteredServers.reduce((sum, s) => sum + s.players, 0) / 2);
    const blueCount = filteredServers.reduce((sum, s) => sum + s.players, 0) - redCount;
    document.getElementById('redTeamCount').textContent = redCount;
    document.getElementById('blueTeamCount').textContent = blueCount;
}

// Mettre √† jour les amis en jeu
function updateFriendsPlaying() {
    const friendsPlayingList = document.getElementById('friendsPlayingList');
    
    // Simuler des amis en jeu
    const friendsPlaying = playerData.friends.filter(f => f.isOnline).slice(0, 3).map(friend => ({
        ...friend,
        server: allServers[Math.floor(Math.random() * allServers.length)],
        team: Math.random() > 0.5 ? 'red' : 'blue'
    }));
    
    if (friendsPlaying.length === 0) {
        friendsPlayingList.innerHTML = `
            <div class="empty-state">
                <div class="empty-icon">üí§</div>
                <div class="empty-text">Aucun ami en jeu actuellement</div>
            </div>
        `;
        return;
    }
    
    friendsPlayingList.innerHTML = friendsPlaying.map(friend => `
        <div class="friend-playing-card">
            <div class="friend-playing-info">
                <div class="friend-avatar">
                    ${friend.avatar}
                    <div class="friend-status-indicator online"></div>
                </div>
                <div class="friend-details">
                    <div class="friend-name">${friend.username}</div>
                    <div class="friend-status-text online">
                        ${friend.team === 'red' ? 'üî¥' : 'üîµ'} ${friend.server.name}
                    </div>
                </div>
            </div>
            <button class="join-friend-btn" onclick="joinFriendServer('${friend.server.id}', '${friend.team}')">
                üéÆ REJOINDRE
            </button>
        </div>
    `).join('');
}

// Rejoindre le serveur d'un ami
function joinFriendServer(serverId, team) {
    selectedTeam = team;
    showNotification(`üéÆ Vous rejoignez votre ami dans l'√©quipe ${team === 'red' ? 'ROUGE üî¥' : 'BLEUE üîµ'} !`, 'success');
    setTimeout(() => joinServer(serverId), 500);
}

// Rejoindre un serveur
function joinServer(serverId) {
    if (!selectedTeam) {
        showNotification('‚ö†Ô∏è Choisissez d\'abord une √©quipe !', 'warning');
        return;
    }
    
    currentServer = allServers.find(s => s.id === serverId);
    if (!currentServer) {
        showNotification('‚ùå Serveur introuvable !', 'error');
        return;
    }
    
    if (currentServer.full) {
        showNotification('üîí Serveur complet !', 'warning');
        return;
    }
    
    showNotification(`üéÆ Connexion au ${currentServer.name}...`, 'info');
    
    setTimeout(() => {
        startMultiplayerGame();
    }, 1500);
}

// D√©marrer le jeu multijoueur
function startMultiplayerGame() {
    // Fermer tous les √©crans
    document.querySelectorAll('.screen').forEach(screen => screen.classList.remove('active'));
    document.getElementById('multiplayerGameScreen').classList.add('active');
    
    // G√©n√©rer les joueurs
    generateMultiplayerPlayers();
    
    // Initialiser les scores
    teamScores = { red: 0, blue: 0 };
    updateTeamScores();
    
    // D√©marrer le timer du match
    matchTimer = 300; // 5 minutes
    startMatchTimer();
    
    // Ajouter des messages de bienvenue dans le chat
    addChatMessage('Syst√®me', 'all', `Bienvenue sur ${currentServer.name} ! üéÆ`, Date.now());
    addChatMessage('Syst√®me', 'all', `La partie commence ! Bon jeu √† tous ! ‚öîÔ∏è`, Date.now() + 1000);
    
    // Simuler des messages de chat
    simulateChatMessages();
    
    // Afficher les joueurs
    updatePlayersListDisplay();
    
    // Dessiner un message sur le canvas (d√©mo)
    const canvas = document.getElementById('multiplayerCanvas');
    const ctx = canvas.getContext('2d');
    
    // Fond du canvas
    ctx.fillStyle = '#1a1a1a';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    
    // Message de d√©mo
    ctx.fillStyle = 'white';
    ctx.font = 'bold 32px Arial';
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.fillText('üéÆ MULTIPLAYER DEMO', canvas.width / 2, canvas.height / 2 - 60);
    
    ctx.font = '20px Arial';
    ctx.fillStyle = '#9CA3AF';
    ctx.fillText('This is a multiplayer simulation', canvas.width / 2, canvas.height / 2 - 10);
    ctx.fillText('Use the chat on the left to test! üí¨', canvas.width / 2, canvas.height / 2 + 30);
    ctx.fillText('Real gameplay requires a backend server', canvas.width / 2, canvas.height / 2 + 70);
    
    showNotification('üéÆ Partie lanc√©e ! Bonne chance ! ‚öîÔ∏è', 'success');
}

// G√©n√©rer les joueurs du match
function generateMultiplayerPlayers() {
    multiplayerPlayers = [];
    
    // Ajouter le joueur actuel
    multiplayerPlayers.push({
        username: currentUser || 'Joueur1',
        avatar: 'üë§',
        team: selectedTeam,
        score: 0,
        isCurrentPlayer: true
    });
    
    // Ajouter des joueurs al√©atoires
    const numPlayers = Math.min(currentServer.players - 1, 19);
    const usedNames = [currentUser];
    
    for (let i = 0; i < numPlayers; i++) {
        let name = playerNames[Math.floor(Math.random() * playerNames.length)];
        while (usedNames.includes(name)) {
            name = playerNames[Math.floor(Math.random() * playerNames.length)];
        }
        usedNames.push(name);
        
        multiplayerPlayers.push({
            username: name,
            avatar: ['üê≠', 'ü¶ä', 'üê∫', 'üêª', 'üêº', 'ü¶Å', 'üêØ', 'üê®'][Math.floor(Math.random() * 8)],
            team: i % 2 === 0 ? 'red' : 'blue',
            score: Math.floor(Math.random() * 100)
        });
    }
}

// Mettre √† jour l'affichage des scores des √©quipes
function updateTeamScores() {
    document.getElementById('redScore').textContent = teamScores.red;
    document.getElementById('blueScore').textContent = teamScores.blue;
}

// D√©marrer le timer du match
function startMatchTimer() {
    if (matchInterval) clearInterval(matchInterval);
    
    matchInterval = setInterval(() => {
        matchTimer--;
        
        const minutes = Math.floor(matchTimer / 60);
        const seconds = matchTimer % 60;
        document.getElementById('matchTimer').textContent = 
            `${minutes}:${seconds.toString().padStart(2, '0')}`;
        
        // Simuler des points al√©atoires
        if (Math.random() > 0.95) {
            const team = Math.random() > 0.5 ? 'red' : 'blue';
            teamScores[team] += Math.floor(Math.random() * 10) + 5;
            updateTeamScores();
            
            const scorer = multiplayerPlayers.find(p => p.team === team);
            if (scorer) {
                scorer.score += 10;
                addChatMessage('Syst√®me', team, `${scorer.username} a marqu√© ! +10 points ! üéØ`, Date.now());
                updatePlayersListDisplay();
            }
        }
        
        if (matchTimer <= 0) {
            endMultiplayerGame();
        }
    }, 1000);
}

// Terminer le jeu multijoueur
function endMultiplayerGame() {
    clearInterval(matchInterval);
    
    const winner = teamScores.red > teamScores.blue ? 'ROUGE üî¥' : 
                   teamScores.blue > teamScores.red ? 'BLEUE üîµ' : '√âGALIT√â';
    
    showNotification(`üèÜ Fin du match ! √âquipe ${winner} gagne ! üéâ`, 'success');
    
    setTimeout(() => {
        backToMenu();
    }, 3000);
}

// Pause du jeu multijoueur
function pauseMultiplayerGame() {
    const pauseMenu = document.getElementById('multiplayerPauseMenu');
    
    if (pauseMenu.style.display === 'none' || !pauseMenu.style.display) {
        // Mettre en pause
        if (matchInterval) {
            clearInterval(matchInterval);
            matchInterval = null;
        }
        pauseMenu.style.display = 'flex';
        showNotification('‚è∏Ô∏è Partie en pause', 'info');
    } else {
        // Reprendre
        resumeMultiplayerGame();
    }
}

// Reprendre le jeu multijoueur
function resumeMultiplayerGame() {
    const pauseMenu = document.getElementById('multiplayerPauseMenu');
    pauseMenu.style.display = 'none';
    
    // Red√©marrer le timer
    startMatchTimer();
    showNotification('‚ñ∂Ô∏è Partie reprise', 'success');
}

// Quitter le jeu multijoueur
function quitMultiplayerGame() {
    if (confirm('Voulez-vous vraiment quitter la partie ?')) {
        if (matchInterval) {
            clearInterval(matchInterval);
            matchInterval = null;
        }
        
        const pauseMenu = document.getElementById('multiplayerPauseMenu');
        pauseMenu.style.display = 'none';
        
        showNotification('üëã Vous avez quitt√© la partie', 'info');
        backToMenu();
    }
}

// √âcouter la touche √âchap pour le menu pause multijoueur
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        const multiplayerGameScreen = document.getElementById('multiplayerGameScreen');
        if (multiplayerGameScreen && multiplayerGameScreen.classList.contains('active')) {
            pauseMultiplayerGame();
        }
    }
});

// Toggle chat
function toggleChat() {
    isChatOpen = !isChatOpen;
    const chatBox = document.getElementById('chatBox');
    
    if (isChatOpen) {
        chatBox.classList.add('active');
        document.getElementById('chatInput').focus();
        // R√©initialiser le compteur de messages non lus
        document.getElementById('unreadCount').style.display = 'none';
    } else {
        chatBox.classList.remove('active');
    }
}

// Envoyer un message dans le chat
function sendChatMessage() {
    const input = document.getElementById('chatInput');
    const message = input.value.trim();
    
    if (!message) return;
    
    addChatMessage(currentUser || 'Joueur1', selectedTeam, message, Date.now(), true);
    input.value = '';
    
    // Simuler une r√©ponse
    setTimeout(() => {
        const randomPlayer = multiplayerPlayers[Math.floor(Math.random() * multiplayerPlayers.length)];
        const responses = [
            'Bien jou√© ! üëç',
            'Continue comme √ßa ! üî•',
            'On gagne ensemble ! üí™',
            'Super strat√©gie ! üéØ',
            'Attention derri√®re toi ! ‚ö†Ô∏è'
        ];
        addChatMessage(randomPlayer.username, randomPlayer.team, responses[Math.floor(Math.random() * responses.length)], Date.now());
    }, Math.random() * 3000 + 1000);
}

// Ajouter un message au chat
function addChatMessage(username, team, text, timestamp, isOwn = false) {
    const messagesContainer = document.getElementById('chatMessages');
    
    const time = new Date(timestamp);
    const timeStr = `${time.getHours()}:${time.getMinutes().toString().padStart(2, '0')}`;
    
    const messageEl = document.createElement('div');
    messageEl.className = `chat-message ${isOwn ? 'own' : ''} team-${team}`;
    messageEl.innerHTML = `
        <div class="chat-message-header">
            <span class="chat-username ${team}">${username}</span>
            <span class="chat-timestamp">${timeStr}</span>
        </div>
        <div class="chat-message-text">${text}</div>
    `;
    
    messagesContainer.appendChild(messageEl);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    // Notification si le chat est ferm√©
    if (!isChatOpen && !isOwn) {
        const unreadBadge = document.getElementById('unreadCount');
        unreadBadge.style.display = 'flex';
        const currentCount = parseInt(unreadBadge.textContent) || 0;
        unreadBadge.textContent = currentCount + 1;
    }
}

// Simuler des messages de chat
function simulateChatMessages() {
    const messages = [
        'Salut tout le monde ! üëã',
        'Pr√™ts pour cette partie ? üî•',
        'Bonne chance √† tous ! üçÄ',
        'On va gagner ! üí™',
        'Go go go ! ‚ö°',
        'Nice ! üëç',
        'GG ! üéâ',
        'Bien jou√© team ! üèÜ'
    ];
    
    setInterval(() => {
        if (Math.random() > 0.7) {
            const player = multiplayerPlayers[Math.floor(Math.random() * multiplayerPlayers.length)];
            const message = messages[Math.floor(Math.random() * messages.length)];
            addChatMessage(player.username, player.team, message, Date.now());
        }
    }, 5000);
}

// Toggle liste des joueurs
function togglePlayersList() {
    isPlayersListOpen = !isPlayersListOpen;
    const container = document.getElementById('playersListContainer');
    
    if (isPlayersListOpen) {
        container.classList.add('active');
    } else {
        container.classList.remove('active');
    }
}

// Mettre √† jour l'affichage de la liste des joueurs
function updatePlayersListDisplay() {
    const redPlayers = multiplayerPlayers.filter(p => p.team === 'red').sort((a, b) => b.score - a.score);
    const bluePlayers = multiplayerPlayers.filter(p => p.team === 'blue').sort((a, b) => b.score - a.score);
    
    const redTeamList = document.getElementById('redTeamPlayers');
    const blueTeamList = document.getElementById('blueTeamPlayers');
    
    redTeamList.innerHTML = redPlayers.map(player => `
        <div class="player-item">
            <div class="player-item-info">
                <div class="player-avatar-small">${player.avatar}</div>
                <div class="player-name-small">${player.username}${player.isCurrentPlayer ? ' (Vous)' : ''}</div>
            </div>
            <div class="player-score-small">${player.score}</div>
        </div>
    `).join('');
    
    blueTeamList.innerHTML = bluePlayers.map(player => `
        <div class="player-item">
            <div class="player-item-info">
                <div class="player-avatar-small">${player.avatar}</div>
                <div class="player-name-small">${player.username}${player.isCurrentPlayer ? ' (Vous)' : ''}</div>
            </div>
            <div class="player-score-small">${player.score}</div>
        </div>
    `).join('');
}

// Pause du jeu multijoueur
function pauseMultiplayerGame() {
    if (matchInterval) {
        clearInterval(matchInterval);
        matchInterval = null;
        showNotification('‚è∏Ô∏è Partie en pause', 'info');
    } else {
        startMatchTimer();
        showNotification('‚ñ∂Ô∏è Partie reprise', 'success');
    }
}


